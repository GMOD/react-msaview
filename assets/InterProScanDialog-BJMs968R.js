import{u as m,o as f,i as h,R as r,d as k,D as E,T as y,B as l,e as w}from"./index-DPWBesFv.js";import{t as g,a as P,j as F}from"./fetchUtils-iNLkv-IC.js";const d="https://www.ebi.ac.uk/Tools/services/rest";async function I({seq:n,onProgress:a,onJobId:t,programs:c,model:o}){const i=await g(`${d}/iprscan5/run`,{method:"POST",body:new URLSearchParams({email:"colin.diesh@gmail.com",sequence:n,programs:c.join(",")})});t==null||t(i),await R({jobId:i,onProgress:a}),await $({jobId:i,model:o})}function A(n){return F(`${d}/iprscan5/result/${n}/json`)}async function R({onProgress:n,jobId:a}){const t=`${d}/iprscan5/status/${a}`;try{for(;;){for(let o=0;o<10;o++)await P(1e3),n({msg:`Checking status ${10-o}`,url:t});const c=await g(t);if(c.includes("FINISHED"))break;if(c.includes("FAILURE"))throw new Error(`Failed to run: jobId ${a}`)}}finally{n()}}async function D({algorithm:n,seq:a,programs:t,onJobId:c,onProgress:o,model:i}){try{throw o({msg:`Launching ${n} MSA`}),n==="interproscan"&&await I({seq:a,onJobId:c,onProgress:o,programs:t,model:i}),new Error("unknown algorithm")}finally{o()}}async function $({jobId:n,model:a}){try{a.setStatus({msg:`Downloading results of ${n} (for larger sequences this can be slow, click status to download and upload in the manual tab)`,url:`https://www.ebi.ac.uk/Tools/services/rest/iprscan5/result/${n}/json`});const t=await A(n);a.setInterProAnnotations(Object.fromEntries(t.results.map(c=>[c.xref[0].id,c]))),a.setShowDomains(!0),m.getSession(a).notify(`Loaded interproscan ${n} results`,"success")}catch(t){console.error(t),m.getSession(a).notifyError(`${t}`,t)}finally{a.setStatus()}}const T=f(function({handleClose:n,model:a}){const[t,c]=h.useState([{name:"NCBIfam",description:"NCBI RefSeq FAMs including TIGRFAMs",category:"Families, domains, sites & repeats",checked:!0},{name:"SFLD",description:"Structure function linkage database",category:"Families, domains, sites & repeats",checked:!0},{name:"Phobius",checked:!0,description:"A combined transmembrane topology and signal peptide predictor",category:"Other sequence features"},{name:"SignalP",checked:!0,category:"Other sequence features"},{name:"SignalP_EUK",category:"Other category",checked:!0},{name:"SignalP_GRAM_POSITIVE",category:"Other category",checked:!0},{name:"SignalP_GRAM_NEGATIVE",checked:!0,category:"Other category"},{name:"SUPERFAMILY",category:"Structural domains",checked:!0},{name:"PANTHER",category:"Families, domains, sites & repeats",checked:!0},{name:"Gene3D",category:"Structural domains",checked:!0},{name:"Hamap",category:"Families, domains, sites & repeats",checked:!0},{name:"ProSiteProfiles",category:"Families, domains, sites & repeats",checked:!0},{name:"ProSitePatterns",category:"Families, domains, sites & repeats",checked:!0},{name:"Coils",category:"Other sequence features",checked:!0},{name:"SMART",category:"Families, domains, sites & repeats",checked:!0},{name:"CDD",description:"Conserved Domains Database",category:"Families, domains, sites & repeats",checked:!0},{name:"PRINTS",category:"Families, domains, sites & repeats",checked:!0},{name:"Pfam",category:"Families, domains, sites & repeats",checked:!0},{name:"MobiDBLite",checked:!0,category:"Other sequence features"},{name:"PIRSF",checked:!0,category:"Other category"},{name:"TMHMM",checked:!0,category:"Other sequence features"},{name:"AntiFam",checked:!0,category:"Other category"},{name:"FunFam",checked:!0,category:"Other category"},{name:"PIRSR",checked:!0,category:"Families, domains, sites & repeats"}]),o=t.filter(e=>e.checked).map(e=>e.name),[i,p]=h.useState(!1);return r.createElement(k.Dialog,{maxWidth:"xl",title:"Query InterProScan API for domains",onClose:()=>{n()},open:!0},r.createElement(E,null,r.createElement(y,null,"This will run InterProScan via the InterProScan API on all rows of the current MSA"),r.createElement(l,{onClick:()=>{p(!i)}},i?"Hide":"Show"," advanced options"),i?r.createElement("div",null,r.createElement(y,null,"Select algorithms for InterProScan to run"),r.createElement("div",null,r.createElement(l,{variant:"contained",color:"secondary",onClick:()=>{c(t.map(e=>({...e,checked:!1})))}},"Select none"),r.createElement(l,{variant:"contained",color:"primary",onClick:()=>{c(t.map(e=>({...e,checked:!0})))}},"Select all")),r.createElement("table",null,r.createElement("tbody",null,t.sort((e,s)=>e.category.localeCompare(s.category)).map(({name:e,checked:s,category:S})=>r.createElement("tr",{key:e},r.createElement("td",null,r.createElement("input",{type:"checkbox",key:e,checked:s,onChange:()=>{c(t.map(u=>u.name===e?{...u,checked:!u.checked}:u))}})),r.createElement("td",null,e),r.createElement("td",null,S)))))):null),r.createElement(w,null,r.createElement(l,{variant:"contained",color:"secondary",onClick:()=>{n()}},"Cancel"),r.createElement(l,{variant:"contained",color:"primary",onClick:()=>{(async()=>{try{const{rows:e}=a;if(e.length>140)throw new Error("Too many sequences, please run InterProScan offline");await D({algorithm:"interproscan",programs:o,seq:e.map(s=>[s[0],s[1].replaceAll("-","")]).filter(s=>!!s[1]).map(s=>`>${s[0]}
${s[1]}`).join(`
`),onProgress:s=>{a.setStatus(s)},model:a})}catch(e){console.error(e),m.getSession(a).notifyError(`${e}`,e)}finally{a.setStatus()}})(),n()}},"Send sequences to InterProScan")))});export{T as default};
//# sourceMappingURL=InterProScanDialog-BJMs968R.js.map
