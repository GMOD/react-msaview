{"version":3,"sources":["../../src/util.ts","../../src/index.ts","../../src/colorSchemes.ts","../../src/parseNewick.js","../../../src/components/MSAView.tsx","../../../src/components/ImportForm.tsx","../../../components/data/seq2.js","../../../src/components/TreeCanvas.tsx","../../../src/components/MSACanvas.tsx","../../../src/components/Ruler.tsx","../../../src/components/TreeRuler.tsx","../../../src/components/Header.tsx","../../../src/components/SettingsDlg.tsx","../../../src/components/AboutDlg.tsx","../../../src/components/DetailsDlg.tsx","../../src/model.ts","../../../src/parsers/ClustalMSA.ts","../../../src/parsers/StockholmMSA.ts","../../../src/parsers/FastaMSA.ts","ProteinPanel.js","App.js","reportWebVitals.js","index.js"],"names":["Object","generateNodeIds","parent","depth","id","branchset","tree","b","transform","clustal","G","P","S","T","H","K","R","F","W","Y","I","L","M","V","lesk","A","C","N","Q","D","E","maeditor","flower","rainbow_dna","U","clustalx_protein","clustalx_dna","jalview_buried","B","X","Z","jalview_hydrophobicity","jalview_prophelix","jalview_propstrand","jalview_propturn","jalview_taylor","jalview_zappo","cinema","key","val","letter","color","s","ancestors","tokens","i","token","subtree","x","parseFloat","observer","model","done","initialized","treeAreaWidth","height","useState","cropMouseDown","setCropMouseDown","useEffect","listener","event","listener2","document","style","overflow","display","width","onMouseDown","cursor","background","position","variant","Li","onClick","children","href","msaFile","setMsaFile","treeFile","setTreeFile","container","spacing","justify","alignItems","item","location","setLocation","disabled","uri","msa","smallMSA","smallTree","transaction","radius","randomColor","Math","padding","TreeBlock","offsetY","ref","useRef","collapseBranchMenuRef","toggleNodeMenuRef","clickRef","collapsedClickMap","setCollapsedClickMap","nameClickMap","setNameClickMap","collapseBranchMenu","setCollapseBranchMenu","toggleNodeMenu","setToggleNodeMenu","hierarchy","rowHeight","scrollY","treeWidth","showBranchLen","collapsed","margin","labelsAlignRight","noTree","blockSize","drawNodeBubbles","drawTree","structures","y","clickCtx","data","entry","ctx","tempCollapsedClickMap","tempNameClickMap","context","font","source","target","sy","sx","ty","tx","y1","y2","node","name","col","len","yp","xp","hasStructure","left","top","anchorEl","transitionDuration","keepMounted","open","Boolean","onClose","handleCloseBranchMenu","dense","handleCloseToggleMenu","JSON","structure","onMouseMove","hoverCollapsedClickMap","hoverNameClickMap","data2","scheduled","deltaY","prevY","blocksY","mouseDragging","setMouseDragging","curr","requestAnimationFrame","origEvent","cleanup","distanceY","window","onMouseUp","onMouseLeave","block","MSABlock","offsetX","MSA","colWidth","bgColor","columns","scrollX","colorSchemeName","mouseCol","theme","colorScheme","colorSchemes","colorContrast","useMemo","mouseoverRef","leaves","yStart","yEnd","xStart","xEnd","visibleLeaves","str","contrast","mouseX","mouseY","zIndex","pointerEvents","msaFilehandle","msaAreaWidth","blocksX","deltaX","prevX","currX","currY","distanceX","by","chooseGridPitch","minMajorPitchBp","minMajorPitchPx","scale","majorMagnitude","parseInt","Number","majorPitch","majorPitchPx","minorPitch","makeTicks","emitMajor","emitMinor","gridPitch","bpPerPx","minBase","maxBase","iterPitch","index","ticks","base","type","mathPower","num","String","useStyles","makeStyles","majorTickLabel","fontSize","majorTick","stroke","minorTick","RulerBlock","start","end","reversed","major","minor","classes","tick","x1","x2","strokeWidth","className","data-bp","textAnchor","settingsDialogVisible","setSettingsDialogVisible","aboutDialogVisible","setAboutDialogVisible","detailsDialogVisible","setDetailsDialogVisible","currentAlignment","alignmentNames","native","value","onChange","option","marginLeft","rowHeightInit","colWidthInit","treeWidthInit","setRowHeight","setColWidth","setTreeWidth","n","rowHeightError","error","colWidthError","treeWidthError","control","checked","label","select","dlgOpen","setDlgOpen","LicenseDialog","alignmentDetails","attributes","setBrLength","d","y0","maxLength","max","getRoot","ascending","a","filter","rest","clamp","min","StructureModel","types","pdb","startPos","endPos","number","range","BaseViewModel","ElementId","mouseRow","selectedStructures","treeFilehandle","FileLocation","setTree","self","setMSA","addStructureToSelection","removeStructureFromSelection","r","elt","toggleStructureSelection","clearSelectedStructures","setError","setMousePos","setColorSchemeName","setScrollY","setScrollX","setTreeAreaWidth","setCurrentAlignment","toggleLabelsAlignRight","toggleDrawTree","toggleCollapsed","toggleBranchLen","toggleBgColor","toggleNodeBubbles","setData","cast","setMSAFilehandle","openLocation","setTreeFilehandle","afterCreate","addDisposer","autorun","oldBlocksX","oldBlocksY","oldValX","oldValY","size","ret","this","text","Stockholm","StockholmMSA","FastaMSA","ClustalMSA","blanks","t","rowNames","getMouseOverResidue","pdbEntry","strs","counter","j","rows","f","row","root","cluster","clust","length","doScrollY","doScrollX","setMouseoveredColumn","file","postProcessor","result","Clustal","alns","find","aln","seq","map","getNames","res","getRow","pdbRegex","ent","dr","match","chain","re","line","seqdata","DatasourceRegistry","add","StaticDatasource","ProteinPanel","setType","setRes","annotation","setAnnotation","stage","setStage","isMouseHovering","setMouseHovering","msaview","nglSelection","console","log","stageElementRef","useCallback","element","currentStage","Stage","dispose","addEventListener","handleResize","Promise","all","selection","loadFile","signals","hovered","pickingProxy","atom","bond","closestBondAtom","resno","chainname","picker","stringify","forEach","removeAllRepresentations","addRepresentation","sele","autoView","annots","removeAnnotation","undefined","k","rn","residueStore","count","rp","getResidueProxy","ap","getAtomProxy","atomOffset","push","addAnnotation","positionToVector3","qualifiedName","viewer","requestRender","Button","clearSelection","Select","MenuItem","TextField","setNGLSelection","onMouseEnter","URLSearchParams","search","get","global","MSAModel","optional","string","actions","sel","create","parse","setWidth","innerWidth","onSnapshot","throttle","snap","url","URL","searchParams","set","history","replaceState","toString","App","border","createJBrowseTheme","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ad00c183.chunk.js","sourcesContent":["export function transform<T>(\n  obj: Record<string, T>,\n  cb: (arg0: [string, T]) => [string, T],\n) {\n  return Object.fromEntries(Object.entries(obj).map(cb))\n}\n\nexport type Node = { branchset?: Node[] }\nexport type NodeWithIds = {\n  id: string\n  branchset?: NodeWithIds[]\n  noTree?: boolean\n}\n\nexport function generateNodeIds(\n  tree: Node,\n  parent = 'node',\n  depth = 0,\n): NodeWithIds {\n  const id = `${parent}-${depth}`\n\n  return {\n    ...tree,\n    id,\n    branchset: tree.branchset?.map((b, i) =>\n      generateNodeIds(b, id + '-' + i, depth + 1),\n    ),\n  }\n}\n","import MSAView from './components/MSAView'\nimport MSAModel from './model'\n\nexport { MSAModel, MSAView }\n","import Color from 'color'\nimport { transform } from './util'\n\nconst colorSchemes = {\n  clustal: {\n    G: 'orange',\n    P: 'orange',\n    S: 'orange',\n    T: 'orange',\n    H: 'red',\n    K: 'red',\n    R: 'red',\n    F: 'blue',\n    W: 'blue',\n    Y: 'blue',\n    I: 'green',\n    L: 'green',\n    M: 'green',\n    V: 'green',\n  },\n  lesk: {\n    G: 'orange',\n    A: 'orange',\n    S: 'orange',\n    T: 'orange',\n    C: 'green',\n    V: 'green',\n    I: 'green',\n    L: 'green',\n    P: 'green',\n    F: 'green',\n    Y: 'green',\n    M: 'green',\n    W: 'green',\n    N: 'magenta',\n    Q: 'magenta',\n    H: 'magenta',\n    D: 'red',\n    E: 'red',\n    K: 'blue',\n    R: 'blue',\n  },\n  maeditor: {\n    A: 'lightgreen',\n    G: 'lightgreen',\n    C: 'green',\n    D: 'darkgreen',\n    E: 'darkgreen',\n    N: 'darkgreen',\n    Q: 'darkgreen',\n    I: 'blue',\n    L: 'blue',\n    M: 'blue',\n    V: 'blue',\n    F: '#c8a2c8',\n    W: '#c8a2c8',\n    Y: '#c8a2c8',\n    H: 'darkblue',\n    K: 'orange',\n    R: 'orange',\n    P: 'pink',\n    S: 'red',\n    T: 'red',\n  },\n\n  //https://github.com/biotite-dev/biotite/blob/8c460972f8ab904312f130dfb80f3efc8c9bd7c5/src/biotite/sequence/graphics/color_schemes/flower.json\n  flower: {\n    A: '#b18a51',\n    C: '#ff5701',\n    D: '#01a578',\n    E: '#2da0a1',\n    F: '#fa559d',\n    G: '#b1c23c',\n    H: '#0194f9',\n    I: '#f27663',\n    K: '#7fc3d7',\n    L: '#df6e75',\n    M: '#fe9daf',\n    N: '#0bcec6',\n    P: '#4fa32a',\n    Q: '#7295ae',\n    R: '#83bff1',\n    S: '#b4bd9b',\n    T: '#d2b576',\n    V: '#fd997b',\n    W: '#ff2ded',\n    Y: '#c96ecf',\n  },\n  rainbow_dna: {\n    A: '#3737f5',\n    C: '#37f537',\n    G: '#f5f537',\n    T: '#f53737',\n    U: '#f53737',\n  },\n\n  //https://github.com/biotite-dev/biotite/blob/8c460972f8ab904312f130dfb80f3efc8c9bd7c5/src/biotite/sequence/graphics/color_schemes/clustalx_protein.json\n  clustalx_protein: {\n    A: '#197fe5',\n    C: '#e57f7f',\n    D: '#cc4ccc',\n    E: '#cc4ccc',\n    F: '#197fe5',\n    G: '#e5994c',\n    H: '#19b2b2',\n    I: '#197fe5',\n    K: '#e53319',\n    L: '#197fe5',\n    M: '#197fe5',\n    N: '#19cc19',\n    P: '#cccc00',\n    Q: '#19cc19',\n    R: '#e53319',\n    S: '#19cc19',\n    T: '#19cc19',\n    V: '#197fe5',\n    W: '#197fe5',\n    Y: '#19b2b2',\n  },\n\n  clustalx_dna: {\n    A: '#e53319',\n    C: '#197fe5',\n    G: '#e5994c',\n    T: '#19cc19',\n    U: '#19cc19',\n  },\n  jalview_buried: {\n    A: '#00a35c',\n    R: '#00fc03',\n    N: '#00eb14',\n    D: '#00eb14',\n    C: '#0000ff',\n    Q: '#00f10e',\n    E: '#00f10e',\n    G: '#009d62',\n    H: '#00d52a',\n    I: '#0054ab',\n    L: '#007b84',\n    K: '#00ff00',\n    M: '#009768',\n    F: '#008778',\n    P: '#00e01f',\n    S: '#00d52a',\n    T: '#00db24',\n    W: '#00a857',\n    Y: '#00e619',\n    V: '#005fa0',\n    B: '#00eb14',\n    X: '#00b649',\n    Z: '#00f10e',\n  },\n\n  jalview_hydrophobicity: {\n    A: '#ad0052',\n    R: '#0000ff',\n    N: '#0c00f3',\n    D: '#0c00f3',\n    C: '#c2003d',\n    Q: '#0c00f3',\n    E: '#0c00f3',\n    G: '#6a0095',\n    H: '#1500ea',\n    I: '#ff0000',\n    L: '#ea0015',\n    K: '#0000ff',\n    M: '#b0004f',\n    F: '#cb0034',\n    P: '#4600b9',\n    S: '#5e00a1',\n    T: '#61009e',\n    W: '#5b00a4',\n    Y: '#4f00b0',\n    V: '#f60009',\n    B: '#0c00f3',\n    X: '#680097',\n    Z: '#0c00f3',\n  },\n\n  jalview_prophelix: {\n    A: '#e718e7',\n    R: '#6f906f',\n    N: '#1be41b',\n    D: '#778877',\n    C: '#23dc23',\n    Q: '#926d92',\n    E: '#ff00ff',\n    G: '#00ff00',\n    H: '#758a75',\n    I: '#8a758a',\n    L: '#ae51ae',\n    K: '#a05fa0',\n    M: '#ef10ef',\n    F: '#986798',\n    P: '#00ff00',\n    S: '#36c936',\n    T: '#47b847',\n    W: '#8a758a',\n    Y: '#21de21',\n    V: '#857a85',\n    B: '#49b649',\n    X: '#758a75',\n    Z: '#c936c9',\n  },\n\n  jalview_propstrand: {\n    A: '#5858a7',\n    R: '#6b6b94',\n    N: '#64649b',\n    D: '#2121de',\n    C: '#9d9d62',\n    Q: '#8c8c73',\n    E: '#0000ff',\n    G: '#4949b6',\n    H: '#60609f',\n    I: '#ecec13',\n    L: '#b2b24d',\n    K: '#4747b8',\n    M: '#82827d',\n    F: '#c2c23d',\n    P: '#2323dc',\n    S: '#4949b6',\n    T: '#9d9d62',\n    W: '#c0c03f',\n    Y: '#d3d32c',\n    V: '#ffff00',\n    B: '#4343bc',\n    X: '#797986',\n    Z: '#4747b8',\n  },\n\n  jalview_propturn: {\n    A: '#2cd3d3',\n    R: '#708f8f',\n    N: '#ff0000',\n    D: '#e81717',\n    C: '#a85757',\n    Q: '#3fc0c0',\n    E: '#778888',\n    G: '#ff0000',\n    H: '#708f8f',\n    I: '#00ffff',\n    L: '#1ce3e3',\n    K: '#7e8181',\n    M: '#1ee1e1',\n    F: '#1ee1e1',\n    P: '#f60909',\n    S: '#e11e1e',\n    T: '#738c8c',\n    W: '#738c8c',\n    Y: '#9d6262',\n    V: '#07f8f8',\n    B: '#f30c0c',\n    X: '#7c8383',\n    Z: '#5ba4a4',\n  },\n\n  jalview_taylor: {\n    A: '#ccff00',\n    R: '#0000ff',\n    N: '#cc00ff',\n    D: '#ff0000',\n    C: '#ffff00',\n    Q: '#ff00cc',\n    E: '#ff0066',\n    G: '#ff9900',\n    H: '#0066ff',\n    I: '#66ff00',\n    L: '#33ff00',\n    K: '#6600ff',\n    M: '#00ff00',\n    F: '#00ff66',\n    P: '#ffcc00',\n    S: '#ff3300',\n    T: '#ff6600',\n    W: '#00ccff',\n    Y: '#00ffcc',\n    V: '#99ff00',\n  },\n\n  jalview_zappo: {\n    A: '#ffafaf',\n    R: '#6464ff',\n    N: '#00ff00',\n    D: '#ff0000',\n    C: '#ffff00',\n    Q: '#00ff00',\n    E: '#ff0000',\n    G: '#ff00ff',\n    H: '#6464ff',\n    I: '#ffafaf',\n    L: '#ffafaf',\n    K: '#6464ff',\n    M: '#ffafaf',\n    F: '#ffc800',\n    P: '#ff00ff',\n    S: '#00ff00',\n    T: '#00ff00',\n    W: '#ffc800',\n    Y: '#ffc800',\n    V: '#ffafaf',\n  },\n\n  cinema: {\n    H: 'blue',\n    K: 'blue',\n    R: 'blue',\n    D: 'red',\n    E: 'red',\n    S: 'green',\n    T: 'green',\n    N: 'green',\n    Q: 'green',\n    A: 'white',\n    V: 'white',\n    L: 'white',\n    I: 'white',\n    M: 'white',\n    F: 'magenta',\n    W: 'magenta',\n    Y: 'magenta',\n    P: 'brown',\n    G: 'brown',\n    C: 'yellow',\n    B: 'gray',\n    Z: 'gray',\n    X: 'gray',\n    '-': 'gray',\n    '.': 'gray',\n  },\n} as { [key: string]: { [key: string]: string } }\n\n// turn all supplied colors to hex colors which getContrastText from mui\n// requires\nexport default transform(colorSchemes, ([key, val]) => [\n  key,\n  transform(val, ([letter, color]) => [letter, Color(color).hex()]),\n])\n","/**\n * Newick format parser in JavaScript.\n *\n * Copyright (c) Jason Davies 2010.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * Example tree (from http://en.wikipedia.org/wiki/Newick_format):\n *\n * +--0.1--A\n * F-----0.2-----B            +-------0.3----C\n * +------------------0.5-----E\n *                            +---------0.4------D\n *\n * Newick format:\n * (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\n *\n * Converted to JSON:\n * {\n *   name: \"F\",\n *   branchset: [\n *     {name: \"A\", length: 0.1},\n *     {name: \"B\", length: 0.2},\n *     {\n *       name: \"E\",\n *       length: 0.5,\n *       branchset: [\n *         {name: \"C\", length: 0.3},\n *         {name: \"D\", length: 0.4}\n *       ]\n *     }\n *   ]\n * }\n *\n * Converted to JSON, but with no names or lengths:\n * {\n *   branchset: [\n *     {}, {}, {\n *       branchset: [{}, {}]\n *     }\n *   ]\n * }\n */\nexport default function parse(s) {\n  const ancestors = []\n  let tree = {}\n  const tokens = s.split(/\\s*(;|\\(|\\)|,|:)\\s*/)\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n    const subtree = {}\n    switch (token) {\n      case '(': // new branchset\n        tree.branchset = [subtree]\n        ancestors.push(tree)\n        tree = subtree\n        break\n      case ',': // another branch\n        ancestors[ancestors.length - 1].branchset.push(subtree)\n        tree = subtree\n        break\n      case ')': // optional name next\n        tree = ancestors.pop()\n        break\n      case ':': // optional length next\n        break\n      default: {\n        const x = tokens[i - 1]\n        if (x === ')' || x === '(' || x === ',') {\n          tree.name = token\n        } else if (x === ':') {\n          tree.length = parseFloat(token)\n        }\n      }\n    }\n  }\n  return tree\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { MsaViewModel } from '../model'\nimport { observer } from 'mobx-react'\nimport { Typography } from '@material-ui/core'\n\nimport ImportForm from './ImportForm'\nimport TreeCanvas from './TreeCanvas'\nimport MSACanvas from './MSACanvas'\nimport Ruler from './Ruler'\nimport TreeRuler from './TreeRuler'\nimport Header from './Header'\n\nconst resizeHandleWidth = 5\n\nexport default observer(({ model }: { model: MsaViewModel }) => {\n  const { done, initialized, treeAreaWidth, height } = model\n  const [cropMouseDown, setCropMouseDown] = useState(false)\n\n  // this has the effect of just \"cropping\" the tree area\n  useEffect(() => {\n    if (cropMouseDown) {\n      const listener = (event: MouseEvent) => {\n        model.setTreeAreaWidth(model.treeAreaWidth + event.movementX)\n      }\n\n      const listener2 = () => setCropMouseDown(false)\n\n      document.addEventListener('mousemove', listener)\n      document.addEventListener('mouseup', listener2)\n      return () => {\n        document.removeEventListener('mousemove', listener)\n        document.removeEventListener('mouseup', listener2)\n      }\n    }\n    return () => {}\n  }, [cropMouseDown, model])\n\n  return !initialized ? (\n    <ImportForm model={model} />\n  ) : !done ? (\n    <Typography variant=\"h4\">Loading...</Typography>\n  ) : (\n    <div style={{ height, overflow: 'hidden' }}>\n      <Header model={model} />\n      <div>\n        <div style={{ display: 'flex', height: 20 }}>\n          <div style={{ overflow: 'hidden', width: treeAreaWidth }}>\n            <TreeRuler model={model} />\n          </div>\n\n          <div style={{ width: resizeHandleWidth }}></div>\n          <Ruler model={model} />\n        </div>\n        <div\n          style={{\n            display: 'flex',\n          }}\n        >\n          <div style={{ overflow: 'hidden', width: treeAreaWidth }}>\n            <TreeCanvas model={model} />\n          </div>\n          <div>\n            <div\n              onMouseDown={() => {\n                setCropMouseDown(true)\n              }}\n              style={{\n                cursor: 'ew-resize',\n                height: '100%',\n                width: resizeHandleWidth,\n                background: `rgba(200,200,200)`,\n                position: 'relative',\n              }}\n            />\n          </div>\n          <MSACanvas model={model} />\n        </div>\n      </div>\n    </div>\n  )\n})\n","import React, { useState } from 'react'\nimport { Button, Container, Grid, Typography, Link } from '@material-ui/core'\nimport { observer } from 'mobx-react'\nimport { transaction } from 'mobx'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport { MsaViewModel } from '../model'\nimport { smallTree, smallMSA } from './data/seq2'\n\nconst Li = ({\n  onClick,\n  children,\n}: {\n  onClick: () => void\n  children: React.ReactNode\n}) => (\n  <Link onClick={onClick} href=\"#\">\n    <Typography>{children}</Typography>\n  </Link>\n)\nexport default observer(({ model }: { model: MsaViewModel }) => {\n  const [msaFile, setMsaFile] = useState<FileLocation>()\n  const [treeFile, setTreeFile] = useState<FileLocation>()\n\n  return (\n    <Container>\n      <div style={{ width: '50%' }}>\n        <Typography>\n          Open an MSA file (stockholm or clustal format) and/or a tree file\n          (newick format).\n        </Typography>\n        <Typography color=\"error\">\n          Note: you can open up just an MSA or just a tree, both are not\n          required. Some MSA files e.g. stockholm format have an embedded tree\n          also and this is fine, and opening a separate tree file is not\n          required.\n        </Typography>\n      </div>\n\n      <Grid container spacing={10} justify=\"center\" alignItems=\"center\">\n        <Grid item>\n          <Typography>MSA file or URL</Typography>\n          <FileSelector location={msaFile} setLocation={setMsaFile} />\n          <Typography>Tree file or URL</Typography>\n          <FileSelector location={treeFile} setLocation={setTreeFile} />\n        </Grid>\n\n        <Grid item>\n          <Button\n            onClick={() => {\n              if (msaFile) {\n                model.setMSAFilehandle(msaFile)\n              }\n              if (treeFile) {\n                model.setTreeFilehandle(treeFile)\n              }\n            }}\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!msaFile && !treeFile}\n          >\n            Open\n          </Button>\n        </Grid>\n\n        <Grid item>\n          <Typography>Examples</Typography>\n          <ul>\n            <li>\n              <Li\n                onClick={() => {\n                  model.setTreeFilehandle({\n                    uri:\n                      'https://jbrowse.org/genomes/newick_trees/sarscov2phylo.pub.ft.nh',\n                  })\n                }}\n              >\n                230k COVID-19 samples (tree only)\n              </Li>\n            </li>\n            <li>\n              <Li\n                onClick={() => {\n                  model.setData({ msa: smallMSA, tree: smallTree })\n                }}\n              >\n                Small protein+tree\n              </Li>\n            </li>\n            <li>\n              <Li\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri: 'https://ihh.github.io/abrowse/build/pfam-cov2.stock',\n                  })\n                }}\n              >\n                PFAM SARS-CoV2 multi-stockholm\n              </Li>\n            </li>\n            <li>\n              <Li\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri:\n                      'https://jbrowse.org/genomes/multiple_sequence_alignments/Lysine.stock',\n                  })\n                }}\n              >\n                Lysine stockholm file\n              </Li>\n            </li>\n            <li>\n              <Li\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri:\n                      'https://jbrowse.org/genomes/multiple_sequence_alignments/PF01601_full.txt',\n                  })\n                }}\n              >\n                PF01601 stockholm file (SARS-CoV2 spike protein)\n              </Li>\n            </li>\n            <li>\n              <Li\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri:\n                      'https://jbrowse.org/genomes/multiple_sequence_alignments/europe_covid.fa',\n                  })\n                }}\n              >\n                Europe COVID full genomes (LR883044.1 and 199 other sequences)\n              </Li>\n            </li>\n            <li>\n              <Li\n                onClick={() => {\n                  transaction(() => {\n                    model.setMSAFilehandle({\n                      uri:\n                        'https://jbrowse.org/genomes/multiple_sequence_alignments/rhv_test-only.aligned_with_mafft_auto.fa',\n                    })\n                    model.setTreeFilehandle({\n                      uri:\n                        'https://jbrowse.org/genomes/multiple_sequence_alignments/rhv_test-only.aligned_with_mafft_auto.nh',\n                    })\n                  })\n                }}\n              >\n                MAFFT+VeryFastTree(17.9k samples)\n              </Li>\n            </li>\n          </ul>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n})\n","export const smallMSA = `CLUSTAL O(1.2.3) multiple sequence alignment\nUniProt/Swiss-Prot|P26898|IL2RA_SHEEP      MEPSLLMWRFFVFIVVPGCVTEACHDDPPSLRNA----------MFKVLRYE----VGTM\nUniProt/Swiss-Prot|P01590|IL2RA_MOUSE      MEPRLLMLGFLSLTIVPSCRAELCLYDPPEVPNA----------TFKALSYK----NGTI\nUniProt/Swiss-Prot|P41690|IL2RA_FELCA      MEPSLLLWGILTFVVVHGHVTELCDENPPDIQHA----------TFKALTYK----TGTM\nUniProt/Swiss-Prot|P01589|IL2RA_HUMAN      MDSYLLMWGLLTFIMVPGCQAELCDDDPPEIPHA----------TFKAMAYK----EGTM\nUniProt/Swiss-Prot|Q5MNY4|IL2RA_MACMU      MDPYLLMWGLLTFITVPGCQAELCDDDPPKITHA----------TFKAVAYK----EGTM\nUniProt/Swiss-Prot|Q95118|IL2RG_BOVIN      -----------------------------------LLMWGLLT-----------------\nUniProt/Swiss-Prot|P40321|IL2RG_CANFA      MLKPPLPLRSLLFLQLSLLGVGLNSTVPMPNGNEDIT------PDFFLTATPSETLSVSS\nUniProt/Swiss-Prot|P26896|IL2RB_RAT        MATVDLSWRLPLYILLLLLATT--------------------------------WVSAAV\nUniProt/Swiss-Prot|Q8BZM1|GLMN_MOUSE       PLPLRSLLFLQLPLLGVGLNP------------------PLPLRSLLFLQLPLLGVGLNP\nUniProt/Swiss-Prot|P36835|IL2_CAPHI        -----------LLGVGLNPKFLTP------------------------------------\nUniProt/Swiss-Prot|Q7JFM4|IL2_AOTVO        MLKPPLPLRSLLFLQLPLLGVGLNPKFLTPSGNEDIGGKPGTGGDFFLTSTPAGTLDVST\nUniProt/Swiss-Prot|Q29416|IL2_CANFA        --------------LFLQLSLLG-------------------------------------\n`\n\nexport const smallTree =\n  '(((UniProt/Swiss-Prot|P26898|IL2RA_SHEEP:0.24036,(UniProt/Swiss-Prot|P41690|IL2RA_FELCA:0.17737,(UniProt/Swiss-Prot|P01589|IL2RA_HUMAN:0.03906,UniProt/Swiss-Prot|Q5MNY4|IL2RA_MACMU:0.03787):0.13033):0.04964):0.02189,UniProt/Swiss-Prot|P01590|IL2RA_MOUSE:0.23072):0.06814,(((UniProt/Swiss-Prot|Q95118|IL2RG_BOVIN:0.09600,UniProt/Swiss-Prot|P40321|IL2RG_CANFA:0.09845):0.25333,UniProt/Swiss-Prot|Q29416|IL2_CANFA:-0.35055):0.10231,(UniProt/Swiss-Prot|P26896|IL2RB_RAT:0.33631,UniProt/Swiss-Prot|Q7JFM4|IL2_AOTVO:-0.33631):0.10166):0.01607,(UniProt/Swiss-Prot|Q8BZM1|GLMN_MOUSE:0.32378,UniProt/Swiss-Prot|P36835|IL2_CAPHI:-0.32378):0.09999)'\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Menu, MenuItem } from '@material-ui/core'\nimport normalizeWheel from 'normalize-wheel'\nimport { observer } from 'mobx-react'\nimport copy from 'copy-to-clipboard'\nimport { MsaViewModel } from '../model'\n\nconst extendBounds = 5\nconst radius = 3.5\nconst d = radius * 2\n\nfunction randomColor() {\n  return [\n    Math.floor(Math.random() * 255),\n    Math.floor(Math.random() * 255),\n    Math.floor(Math.random() * 255),\n  ]\n}\n\nconst padding = 600\n\ntype ClickMap = { [key: string]: { id: string; name: string } }\ninterface TooltipData {\n  name: string\n  id: string\n  x: number\n  y: number\n}\nconst TreeBlock = observer(\n  ({ model, offsetY }: { model: MsaViewModel; offsetY: number }) => {\n    const ref = useRef<HTMLCanvasElement>(null)\n    const collapseBranchMenuRef = useRef<HTMLDivElement>(null)\n    const toggleNodeMenuRef = useRef<HTMLDivElement>(null)\n    const clickRef = useRef<HTMLCanvasElement>(null)\n    const [collapsedClickMap, setCollapsedClickMap] = useState<ClickMap>({})\n    const [nameClickMap, setNameClickMap] = useState<ClickMap>({})\n    const [collapseBranchMenu, setCollapseBranchMenu] = useState<TooltipData>()\n    const [toggleNodeMenu, setToggleNodeMenu] = useState<TooltipData>()\n\n    const {\n      hierarchy,\n      rowHeight,\n      scrollY,\n      treeWidth,\n      showBranchLen,\n      collapsed,\n      margin,\n      labelsAlignRight,\n      noTree,\n      blockSize,\n      drawNodeBubbles,\n      drawTree,\n      treeAreaWidth,\n      structures,\n    } = model\n\n    useEffect(() => {\n      if (!ref.current || !clickRef.current) {\n        return\n      }\n      const ctx = ref.current.getContext('2d')\n      const clickCtx = clickRef.current.getContext('2d')\n      if (!ctx || !clickCtx) {\n        return\n      }\n      const tempCollapsedClickMap: ClickMap = {}\n      const tempNameClickMap: ClickMap = {}\n      ;[ctx, clickCtx].forEach((context) => {\n        context.resetTransform()\n        context.clearRect(0, 0, treeWidth + padding, blockSize)\n        context.translate(margin.left, -offsetY)\n      })\n\n      const font = ctx.font\n      ctx.font = font.replace(/\\d+px/, `${Math.max(8, rowHeight - 8)}px`)\n\n      if (!noTree && drawTree) {\n        hierarchy.links().forEach(({ source, target }) => {\n          const y = showBranchLen ? 'len' : 'y'\n          //@ts-ignore\n          const { x: sy, [y]: sx } = source\n          //@ts-ignore\n          const { x: ty, [y]: tx } = target\n\n          const y1 = Math.min(sy, ty)\n          const y2 = Math.max(sy, ty)\n          //1d line intersection to check if line crosses block at all, this\n          //is an optimization that allows us to skip drawing most tree links\n          //outside the block\n          if (offsetY + blockSize >= y1 && y2 >= offsetY) {\n            ctx.beginPath()\n            ctx.moveTo(sx, sy)\n            ctx.lineTo(sx, ty)\n            ctx.lineTo(tx, ty)\n            ctx.stroke()\n          }\n        })\n\n        if (drawNodeBubbles) {\n          hierarchy.descendants().forEach((node) => {\n            const val = showBranchLen ? 'len' : 'y'\n            const {\n              //@ts-ignore\n              x: y,\n              //@ts-ignore\n              [val]: x,\n              data,\n            } = node\n            const { id = '', name = '' } = data\n\n            if (\n              y > offsetY - extendBounds &&\n              y < offsetY + blockSize + extendBounds\n            ) {\n              ctx.strokeStyle = 'black'\n              ctx.fillStyle = collapsed.includes(id) ? 'black' : 'white'\n              ctx.beginPath()\n              ctx.arc(x, y, radius, 0, 2 * Math.PI)\n              ctx.fill()\n              ctx.stroke()\n\n              const col = randomColor()\n              tempCollapsedClickMap[`${col}`] = { id, name }\n              clickCtx.fillStyle = `rgb(${col})`\n              clickCtx.fillRect(x - radius, y - radius, d, d)\n            }\n          })\n        }\n      }\n\n      if (rowHeight >= 10) {\n        if (labelsAlignRight) {\n          ctx.textAlign = 'end'\n          ctx.setLineDash([3, 5])\n        } else {\n          ctx.textAlign = 'start'\n        }\n        hierarchy.leaves().forEach((node) => {\n          const {\n            //@ts-ignore\n            x: y,\n            //@ts-ignore\n            y: x,\n            data: { name },\n            //@ts-ignore\n            len,\n          } = node\n          if (\n            y > offsetY - extendBounds &&\n            y < offsetY + blockSize + extendBounds\n          ) {\n            //note: +rowHeight/4 matches with -rowHeight/4 in msa\n            const yp = y + rowHeight / 4\n            const xp = showBranchLen ? len : x\n\n            const col = randomColor()\n            tempNameClickMap[`${col}`] = { id: name, name }\n            clickCtx.fillStyle = `rgb(${col})`\n\n            const { width } = ctx.measureText(name)\n            const height = ctx.measureText('M').width // use an 'em' for height\n\n            const hasStructure = structures[name]\n            ctx.fillStyle = hasStructure ? 'blue' : 'black'\n\n            if (!drawTree && !labelsAlignRight) {\n              ctx.fillText(name, 0, yp)\n\n              if (hasStructure) {\n                clickCtx.fillRect(0, yp - height, width, height)\n              }\n            } else if (labelsAlignRight) {\n              if (drawTree) {\n                const { width } = ctx.measureText(name)\n                ctx.moveTo(xp + radius + 2, y)\n                ctx.lineTo(treeAreaWidth - margin.left * 2 - width - 2, y)\n                ctx.stroke()\n              }\n              ctx.fillText(name, treeAreaWidth - margin.left * 2, yp)\n              if (hasStructure) {\n                clickCtx.fillRect(\n                  treeAreaWidth - 30 - width,\n                  yp - height,\n                  width,\n                  height,\n                )\n              }\n            } else {\n              ctx.fillText(name, xp + d, yp)\n              if (hasStructure) {\n                clickCtx.fillRect(xp + d, yp - height, width, height)\n              }\n            }\n          }\n        })\n        ctx.setLineDash([])\n      }\n      setCollapsedClickMap(tempCollapsedClickMap)\n      setNameClickMap(tempNameClickMap)\n    }, [\n      collapsed,\n      rowHeight,\n      margin.left,\n      hierarchy,\n      offsetY,\n      treeWidth,\n      showBranchLen,\n      noTree,\n      blockSize,\n      drawNodeBubbles,\n      drawTree,\n      labelsAlignRight,\n      treeAreaWidth,\n      structures,\n    ])\n\n    function hoverCollapsedClickMap(event: React.MouseEvent) {\n      const x = event.nativeEvent.offsetX\n      const y = event.nativeEvent.offsetY\n      if (!clickRef.current) {\n        return\n      }\n      const clickCtx = clickRef.current.getContext('2d')\n      if (!clickCtx) {\n        return\n      }\n      const { data } = clickCtx.getImageData(x, y, 1, 1)\n      const entry = collapsedClickMap[`${[data[0], data[1], data[2]]}`]\n      if (!entry) {\n        return\n      }\n      return { ...entry, x, y }\n    }\n\n    function hoverNameClickMap(event: React.MouseEvent) {\n      const x = event.nativeEvent.offsetX\n      const y = event.nativeEvent.offsetY\n      if (!clickRef.current) {\n        return\n      }\n      const clickCtx = clickRef.current.getContext('2d')\n      if (!clickCtx) {\n        return\n      }\n\n      const { data } = clickCtx.getImageData(x, y, 1, 1)\n      const entry = nameClickMap[`${[data[0], data[1], data[2]]}`]\n      if (!entry) {\n        return\n      }\n\n      return { ...entry, x, y }\n    }\n    function handleCloseBranchMenu() {\n      setCollapseBranchMenu(undefined)\n    }\n\n    function handleCloseToggleMenu() {\n      setToggleNodeMenu(undefined)\n    }\n    return (\n      <>\n        <div\n          ref={collapseBranchMenuRef}\n          style={{\n            position: 'absolute',\n            left: collapseBranchMenu?.x || 0,\n            top: scrollY + offsetY + (collapseBranchMenu?.y || 0),\n          }}\n        />\n        <div\n          ref={toggleNodeMenuRef}\n          style={{\n            position: 'absolute',\n            left: toggleNodeMenu?.x || 0,\n            top: scrollY + offsetY + (toggleNodeMenu?.y || 0),\n          }}\n        />\n\n        {collapseBranchMenu?.id ? (\n          <Menu\n            anchorEl={collapseBranchMenuRef.current}\n            transitionDuration={0}\n            keepMounted\n            open={Boolean(collapseBranchMenuRef.current)}\n            onClose={handleCloseBranchMenu}\n          >\n            <MenuItem\n              dense\n              onClick={() => {\n                model.toggleCollapsed(collapseBranchMenu.id)\n                handleCloseBranchMenu()\n              }}\n            >\n              {model.collapsed.includes(collapseBranchMenu.id)\n                ? 'Expand'\n                : 'Collapse'}\n            </MenuItem>\n          </Menu>\n        ) : null}\n        {toggleNodeMenu?.id ? (\n          <Menu\n            anchorEl={toggleNodeMenuRef.current}\n            transitionDuration={0}\n            keepMounted\n            open={Boolean(toggleNodeMenuRef.current)}\n            onClose={handleCloseToggleMenu}\n          >\n            {structures[toggleNodeMenu.id]?.map((entry) => {\n              const found = model.selectedStructures.find(\n                (node) => node.id === toggleNodeMenu.id,\n              )\n              return !found ? (\n                <MenuItem\n                  key={JSON.stringify(entry)}\n                  dense\n                  onClick={() => {\n                    model.addStructureToSelection({\n                      structure: entry,\n                      id: toggleNodeMenu.id,\n                    })\n                    handleCloseToggleMenu()\n                  }}\n                >\n                  Add {entry.pdb} selection\n                </MenuItem>\n              ) : (\n                <MenuItem\n                  key={JSON.stringify(entry)}\n                  dense\n                  onClick={() => {\n                    model.removeStructureFromSelection({\n                      structure: entry,\n                      id: toggleNodeMenu.id,\n                    })\n                    handleCloseToggleMenu()\n                  }}\n                >\n                  Remove {entry.pdb} selection\n                </MenuItem>\n              )\n            })}\n            <MenuItem\n              dense\n              onClick={() => {\n                copy(toggleNodeMenu.id)\n                handleCloseToggleMenu()\n              }}\n            >\n              Copy name to clipboard\n            </MenuItem>\n          </Menu>\n        ) : null}\n\n        <canvas\n          width={treeWidth + padding}\n          height={blockSize}\n          style={{\n            width: treeWidth + padding,\n            height: blockSize,\n            top: scrollY + offsetY,\n            left: 0,\n            position: 'absolute',\n          }}\n          onMouseMove={(event) => {\n            if (!ref.current) {\n              return\n            }\n\n            if (hoverCollapsedClickMap(event) || hoverNameClickMap(event)) {\n              ref.current.style.cursor = 'pointer'\n            } else {\n              ref.current.style.cursor = 'default'\n            }\n          }}\n          onClick={(event) => {\n            const data = hoverCollapsedClickMap(event)\n            if (data?.id) {\n              setCollapseBranchMenu(data)\n            }\n\n            const data2 = hoverNameClickMap(event)\n            if (data2?.id) {\n              setToggleNodeMenu(data2)\n            }\n          }}\n          ref={ref}\n        />\n        <canvas\n          style={{ display: 'none' }}\n          width={treeWidth + padding}\n          height={blockSize}\n          ref={clickRef}\n        />\n      </>\n    )\n  },\n)\nconst TreeCanvas = observer(({ model }: { model: MsaViewModel }) => {\n  const ref = useRef<HTMLDivElement>(null)\n  const scheduled = useRef(false)\n  const deltaY = useRef(0)\n  const prevY = useRef<number>(0)\n  const { treeWidth, height, blocksY } = model\n  const [mouseDragging, setMouseDragging] = useState(false)\n\n  useEffect(() => {\n    const curr = ref.current\n    if (!curr) {\n      return\n    }\n    function onWheel(origEvent: WheelEvent) {\n      const event = normalizeWheel(origEvent)\n      deltaY.current += event.pixelY\n\n      if (!scheduled.current) {\n        scheduled.current = true\n        requestAnimationFrame(() => {\n          model.doScrollY(-deltaY.current)\n          deltaY.current = 0\n          scheduled.current = false\n        })\n      }\n      origEvent.preventDefault()\n    }\n    curr.addEventListener('wheel', onWheel)\n    return () => {\n      curr.removeEventListener('wheel', onWheel)\n    }\n  }, [model])\n\n  useEffect(() => {\n    let cleanup = () => {}\n\n    function globalMouseMove(event: MouseEvent) {\n      event.preventDefault()\n      const currY = event.clientY\n      const distanceY = currY - prevY.current\n      if (distanceY) {\n        // use rAF to make it so multiple event handlers aren't fired per-frame\n        // see https://calendar.perfplanet.com/2013/the-runtime-performance-checklist/\n        if (!scheduled.current) {\n          scheduled.current = true\n          window.requestAnimationFrame(() => {\n            model.doScrollY(distanceY)\n            scheduled.current = false\n            prevY.current = event.clientY\n          })\n        }\n      }\n    }\n\n    function globalMouseUp() {\n      prevY.current = 0\n      if (mouseDragging) {\n        setMouseDragging(false)\n      }\n    }\n\n    if (mouseDragging) {\n      window.addEventListener('mousemove', globalMouseMove, true)\n      window.addEventListener('mouseup', globalMouseUp, true)\n      cleanup = () => {\n        window.removeEventListener('mousemove', globalMouseMove, true)\n        window.removeEventListener('mouseup', globalMouseUp, true)\n      }\n    }\n    return cleanup\n  }, [model, mouseDragging])\n\n  function mouseDown(event: React.MouseEvent) {\n    // check if clicking a draggable element or a resize handle\n    const target = event.target as HTMLElement\n    if (target.draggable || target.dataset.resizer) {\n      return\n    }\n\n    // otherwise do click and drag scroll\n    if (event.button === 0) {\n      prevY.current = event.clientY\n      setMouseDragging(true)\n    }\n  }\n\n  // this local mouseup is used in addition to the global because sometimes\n  // the global add/remove are not called in time, resulting in issue #533\n  function mouseUp(event: React.MouseEvent) {\n    event.preventDefault()\n    setMouseDragging(false)\n  }\n\n  function mouseLeave(event: React.MouseEvent) {\n    event.preventDefault()\n  }\n\n  return (\n    <div\n      ref={ref}\n      onMouseDown={mouseDown}\n      onMouseUp={mouseUp}\n      onMouseLeave={mouseLeave}\n      style={{\n        height,\n        position: 'relative',\n        overflow: 'hidden',\n        width: treeWidth + padding,\n      }}\n    >\n      {blocksY.map((block) => (\n        <TreeBlock key={block} model={model} offsetY={block} />\n      ))}\n    </div>\n  )\n})\n\nexport default TreeCanvas\n","import React, { useEffect, useState, useRef, useMemo } from 'react'\nimport { Typography, CircularProgress, useTheme } from '@material-ui/core'\nimport normalizeWheel from 'normalize-wheel'\nimport Color from 'color'\nimport { observer } from 'mobx-react'\n\nimport colorSchemes from '../colorSchemes'\nimport { transform } from '../util'\nimport { MsaViewModel } from '../model'\n\nconst MSABlock = observer(\n  ({\n    model,\n    offsetX,\n    offsetY,\n  }: {\n    model: MsaViewModel\n    offsetX: number\n    offsetY: number\n  }) => {\n    const {\n      MSA,\n      colWidth,\n      bgColor,\n      columns,\n      rowHeight,\n      scrollY,\n      scrollX,\n      hierarchy,\n      colorSchemeName,\n      blockSize,\n      mouseCol,\n    } = model\n    const theme = useTheme()\n\n    const colorScheme = colorSchemes[colorSchemeName]\n    const colorContrast = useMemo(\n      () =>\n        transform(colorScheme, ([letter, color]) => [\n          letter,\n          theme.palette.getContrastText(Color(color).hex()),\n        ]),\n      [colorScheme, theme.palette],\n    )\n    const ref = useRef<HTMLCanvasElement>(null)\n    const mouseoverRef = useRef<HTMLCanvasElement>(null)\n    useEffect(() => {\n      if (!ref.current) {\n        return\n      }\n\n      const ctx = ref.current.getContext('2d')\n      if (!ctx) {\n        return\n      }\n\n      ctx.resetTransform()\n      ctx.clearRect(0, 0, blockSize, blockSize)\n      ctx.translate(-offsetX, rowHeight / 2 - offsetY)\n      ctx.textAlign = 'center'\n      ctx.font = ctx.font.replace(/\\d+px/, `${Math.max(8, rowHeight - 12)}px`)\n\n      const leaves = hierarchy.leaves()\n      const b = blockSize\n\n      // slice vertical rows, e.g. tree leaves, avoid negative slice\n      const yStart = Math.max(0, Math.floor((offsetY - rowHeight) / rowHeight))\n      const yEnd = Math.max(0, Math.ceil((offsetY + b + rowHeight) / rowHeight))\n\n      // slice horizontal visible letters, avoid negative slice\n      const xStart = Math.max(0, Math.floor(offsetX / colWidth))\n      const xEnd = Math.max(0, Math.ceil((offsetX + b) / colWidth))\n      const visibleLeaves = leaves.slice(yStart, yEnd)\n      visibleLeaves.forEach((node) => {\n        const {\n          //@ts-ignore\n          x: y,\n          //@ts-ignore\n          data: { name },\n        } = node\n\n        const str = columns[name]?.slice(xStart, xEnd)\n        for (let i = 0; i < str?.length; i++) {\n          const letter = str[i]\n          const color = colorScheme[letter.toUpperCase()]\n          if (bgColor) {\n            const x = i * colWidth + offsetX - (offsetX % colWidth)\n            ctx.fillStyle = color || 'white'\n            ctx.fillRect(x, y - rowHeight, colWidth, rowHeight)\n          }\n        }\n      })\n\n      if (rowHeight >= 10 && colWidth >= rowHeight / 2) {\n        visibleLeaves.forEach((node) => {\n          const {\n            //@ts-ignore\n            x: y,\n            //@ts-ignore\n            data: { name },\n          } = node\n\n          const str = columns[name]?.slice(xStart, xEnd)\n          for (let i = 0; i < str?.length; i++) {\n            const letter = str[i]\n            const color = colorScheme[letter.toUpperCase()]\n            const contrast = colorContrast[letter.toUpperCase()] || 'black'\n            const x = i * colWidth + offsetX - (offsetX % colWidth)\n\n            //note: -rowHeight/4 matches +rowHeight/4 in tree\n            ctx.fillStyle = bgColor ? contrast : color || 'black'\n            ctx.fillText(\n              letter,\n              Math.floor(x + colWidth / 2),\n              Math.floor(y - rowHeight / 4),\n            )\n          }\n        })\n      }\n    }, [\n      MSA,\n      columns,\n      colorScheme,\n      colorContrast,\n      bgColor,\n      rowHeight,\n      colWidth,\n      hierarchy,\n      offsetX,\n      offsetY,\n      blockSize,\n    ])\n\n    useEffect(() => {\n      if (!mouseoverRef.current) {\n        return\n      }\n\n      const ctx = mouseoverRef.current.getContext('2d')\n      if (!ctx) {\n        return\n      }\n\n      ctx.resetTransform()\n      ctx.clearRect(0, 0, blockSize, blockSize)\n      ctx.translate(-offsetX, -offsetY)\n      if (\n        mouseCol &&\n        mouseCol > offsetX / colWidth &&\n        mouseCol < (offsetX + blockSize) / colWidth\n      ) {\n        const x = (mouseCol - 1) * colWidth\n        ctx.fillStyle = 'rgba(100,100,100,0.5)'\n        ctx.fillRect(x, 0, colWidth, 1000)\n      }\n    }, [mouseCol, blockSize, colWidth, offsetX, offsetY, rowHeight])\n\n    return (\n      <div style={{ position: 'relative' }}>\n        <canvas\n          ref={ref}\n          onMouseMove={(event) => {\n            if (!ref.current) {\n              return\n            }\n            const { left, top } = ref.current.getBoundingClientRect()\n            const mouseX = event.clientX - left\n            const mouseY = event.clientY - top\n            model.setMousePos(\n              Math.floor((mouseX + offsetX) / colWidth) + 1,\n              Math.floor((mouseY + offsetY) / rowHeight),\n            )\n          }}\n          onMouseLeave={() => model.setMousePos()}\n          width={blockSize}\n          height={blockSize}\n          style={{\n            position: 'absolute',\n            top: scrollY + offsetY,\n            left: scrollX + offsetX,\n            width: blockSize,\n            height: blockSize,\n          }}\n        />\n        <canvas\n          ref={mouseoverRef}\n          width={blockSize}\n          height={blockSize}\n          style={{\n            position: 'absolute',\n            top: scrollY + offsetY,\n            left: scrollX + offsetX,\n            width: blockSize,\n            height: blockSize,\n            zIndex: 1000,\n            pointerEvents: 'none',\n          }}\n        />\n      </div>\n    )\n  },\n)\n\nconst MSACanvas = observer(({ model }: { model: MsaViewModel }) => {\n  const { MSA, msaFilehandle, height, msaAreaWidth, blocksX, blocksY } = model\n  const ref = useRef<HTMLDivElement>(null)\n  // wheel\n  const scheduled = useRef(false)\n  const deltaX = useRef(0)\n  const deltaY = useRef(0)\n  // mouse click-and-drag scrolling\n  const prevX = useRef<number>(0)\n  const prevY = useRef<number>(0)\n  const [mouseDragging, setMouseDragging] = useState(false)\n  useEffect(() => {\n    const curr = ref.current\n    if (!curr) {\n      return\n    }\n    function onWheel(origEvent: WheelEvent) {\n      const event = normalizeWheel(origEvent)\n      deltaX.current += event.pixelX\n      deltaY.current += event.pixelY\n\n      if (!scheduled.current) {\n        scheduled.current = true\n        requestAnimationFrame(() => {\n          model.doScrollX(-deltaX.current)\n          model.doScrollY(-deltaY.current)\n          deltaX.current = 0\n          deltaY.current = 0\n          scheduled.current = false\n        })\n      }\n      origEvent.preventDefault()\n    }\n    curr.addEventListener('wheel', onWheel)\n    return () => {\n      curr.removeEventListener('wheel', onWheel)\n    }\n  }, [model])\n\n  function mouseDown(event: React.MouseEvent) {\n    // check if clicking a draggable element or a resize handle\n    const target = event.target as HTMLElement\n    if (target.draggable || target.dataset.resizer) {\n      return\n    }\n\n    // otherwise do click and drag scroll\n    if (event.button === 0) {\n      prevX.current = event.clientX\n      prevY.current = event.clientY\n      setMouseDragging(true)\n    }\n  }\n\n  // this local mouseup is used in addition to the global because sometimes\n  // the global add/remove are not called in time, resulting in issue #533\n  function mouseUp(event: React.MouseEvent) {\n    event.preventDefault()\n    setMouseDragging(false)\n  }\n\n  function mouseLeave(event: React.MouseEvent) {\n    event.preventDefault()\n  }\n\n  useEffect(() => {\n    let cleanup = () => {}\n\n    function globalMouseMove(event: MouseEvent) {\n      event.preventDefault()\n      const currX = event.clientX\n      const currY = event.clientY\n      const distanceX = currX - prevX.current\n      const distanceY = currY - prevY.current\n      if (distanceX || distanceY) {\n        // use rAF to make it so multiple event handlers aren't fired per-frame\n        // see https://calendar.perfplanet.com/2013/the-runtime-performance-checklist/\n        if (!scheduled.current) {\n          scheduled.current = true\n          window.requestAnimationFrame(() => {\n            model.doScrollX(distanceX)\n            model.doScrollY(distanceY)\n            scheduled.current = false\n            prevX.current = event.clientX\n            prevY.current = event.clientY\n          })\n        }\n      }\n    }\n\n    function globalMouseUp() {\n      prevX.current = 0\n      if (mouseDragging) {\n        setMouseDragging(false)\n      }\n    }\n\n    if (mouseDragging) {\n      window.addEventListener('mousemove', globalMouseMove, true)\n      window.addEventListener('mouseup', globalMouseUp, true)\n      cleanup = () => {\n        window.removeEventListener('mousemove', globalMouseMove, true)\n        window.removeEventListener('mouseup', globalMouseUp, true)\n      }\n    }\n    return cleanup\n  }, [model, mouseDragging])\n\n  return (\n    <div\n      ref={ref}\n      onMouseDown={mouseDown}\n      onMouseUp={mouseUp}\n      onMouseLeave={mouseLeave}\n      style={{\n        position: 'relative',\n        height,\n        width: msaAreaWidth,\n        overflow: 'hidden',\n      }}\n    >\n      {!MSA && !msaFilehandle ? null : !MSA ? (\n        <div style={{ position: 'absolute', left: '50%', top: '50%' }}>\n          <CircularProgress />\n          <Typography>Loading...</Typography>\n        </div>\n      ) : (\n        blocksY\n          .map((by) =>\n            blocksX.map((bx) => (\n              <MSABlock\n                key={`${bx}_${by}`}\n                model={model}\n                offsetX={bx}\n                offsetY={by}\n              />\n            )),\n          )\n          .flat()\n      )}\n    </div>\n  )\n})\n\nexport default MSACanvas\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core'\nimport { observer } from 'mobx-react'\nimport { MsaViewModel } from '../model'\n\n/**\n * Given a scale ( bp/px ) and minimum distances (px) between major and minor\n * gridlines, return an object like `{ majorPitch: bp, minorPitch: bp }` giving\n * the gridline pitches to use.\n */\nexport function chooseGridPitch(\n  scale: number,\n  minMajorPitchPx: number,\n  minMinorPitchPx: number,\n) {\n  scale = Math.abs(scale)\n  const minMajorPitchBp = minMajorPitchPx * scale\n  const majorMagnitude = parseInt(\n    Number(minMajorPitchBp).toExponential().split(/e/i)[1],\n    10,\n  )\n\n  let majorPitch = 10 ** majorMagnitude\n  while (majorPitch < minMajorPitchBp) {\n    majorPitch *= 2\n    if (majorPitch >= minMajorPitchBp) {\n      break\n    }\n    majorPitch *= 2.5\n  }\n\n  majorPitch = Math.max(majorPitch, 5)\n\n  const majorPitchPx = majorPitch / scale\n\n  let minorPitch = 0\n  if (!(majorPitch % 10) && majorPitchPx / 10 >= minMinorPitchPx) {\n    minorPitch = majorPitch / 10\n  } else if (!(majorPitch % 5) && majorPitchPx / 5 >= minMinorPitchPx) {\n    minorPitch = majorPitch / 5\n  } else if (!(majorPitch % 2) && majorPitchPx / 2 >= minMinorPitchPx) {\n    minorPitch = majorPitch / 2\n  }\n\n  return { majorPitch, minorPitch }\n}\nexport function makeTicks(\n  start: number,\n  end: number,\n  bpPerPx: number,\n  emitMajor = true,\n  emitMinor = true,\n) {\n  const gridPitch = chooseGridPitch(bpPerPx, 60, 15)\n\n  let minBase = start\n  let maxBase = end\n  if (minBase === null || maxBase === null) {\n    return []\n  }\n\n  if (bpPerPx < 0) {\n    [minBase, maxBase] = [maxBase, minBase]\n  }\n\n  // add 20px additional on the right and left to allow us to draw the ends\n  // of labels that lie a little outside our region\n  minBase -= Math.abs(20 * bpPerPx)\n  maxBase += Math.abs(20 * bpPerPx) + 1\n\n  const iterPitch = gridPitch.minorPitch || gridPitch.majorPitch\n  let index = 0\n  const ticks = []\n  for (\n    let base = Math.ceil(minBase / iterPitch) * iterPitch;\n    base < maxBase;\n    base += iterPitch\n  ) {\n    if (emitMinor && base % (gridPitch.majorPitch * 2)) {\n      ticks.push({ type: 'minor', base: base - 1, index })\n      index += 1\n    } else if (emitMajor && !(base % (gridPitch.majorPitch * 2))) {\n      ticks.push({ type: 'major', base: base - 1, index })\n      index += 1\n    }\n  }\n  return ticks\n}\n\nfunction mathPower(num: number): string {\n  if (num < 999) {\n    return String(num)\n  }\n  return `${mathPower(~~(num / 1000))},${`00${~~(num % 1000)}`.substr(-3, 3)}`\n}\n\nconst useStyles = makeStyles((/* theme */) => ({\n  majorTickLabel: {\n    fontSize: '11px',\n    // fill: theme.palette.text.primary,\n  },\n  majorTick: {\n    stroke: '#555',\n    // stroke: theme.palette.text.secondary,\n  },\n  minorTick: {\n    stroke: '#999',\n    // stroke: theme.palette.text.hint,\n  },\n}))\n\nfunction RulerBlock({\n  start,\n  end,\n  bpPerPx,\n  reversed,\n  major,\n  minor,\n}: {\n  start: number\n  end: number\n  bpPerPx: number\n  reversed?: boolean\n  major?: boolean\n  minor?: boolean\n}) {\n  const classes = useStyles()\n  const ticks = makeTicks(start, end, bpPerPx, major, minor)\n  return (\n    <>\n      {ticks.map((tick) => {\n        const x = (reversed ? end - tick.base : tick.base - start) / bpPerPx\n        return (\n          <line\n            key={tick.base}\n            x1={x}\n            x2={x}\n            y1={11}\n            y2={tick.type === 'major' ? 11 + 6 : 11 + 4}\n            strokeWidth={1}\n            stroke={tick.type === 'major' ? '#555' : '#999'}\n            className={\n              tick.type === 'major' ? classes.majorTick : classes.minorTick\n            }\n            data-bp={tick.base}\n          />\n        )\n      })}\n      {ticks\n        .filter((tick) => tick.type === 'major')\n        .map((tick) => {\n          const x = (reversed ? end - tick.base : tick.base - start) / bpPerPx\n          return (\n            <text\n              x={x}\n              y={10}\n              key={`label-${tick.base}`}\n              textAnchor=\"middle\"\n              style={{ fontSize: '11px' }}\n              className={classes.majorTickLabel}\n            >\n              {mathPower(tick.base + 1)}\n            </text>\n          )\n        })}\n    </>\n  )\n}\nconst Ruler = observer(({ model }: { model: MsaViewModel }) => {\n  const { MSA, colWidth, msaAreaWidth, scrollX, blocksX, blockSize } = model\n  const offsetX = blocksX[0]\n\n  return !MSA ? null : (\n    <div\n      style={{\n        position: 'relative',\n        width: msaAreaWidth,\n        overflow: 'hidden',\n        height: 20,\n      }}\n    >\n      <svg\n        style={{\n          width: blocksX.length * blockSize,\n          position: 'absolute',\n          left: scrollX + offsetX,\n        }}\n      >\n        <RulerBlock\n          key={offsetX}\n          start={offsetX / colWidth}\n          end={offsetX / colWidth + (blockSize * blocksX.length) / colWidth}\n          bpPerPx={1 / colWidth}\n        />\n      </svg>\n    </div>\n  )\n})\n\nexport default Ruler\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { MsaViewModel } from '../model'\n\nconst TreeRuler = observer(({ model }: { model: MsaViewModel }) => {\n  const { treeWidth } = model\n  return <div style={{ width: treeWidth }} />\n})\n\nexport default TreeRuler\n","import React, { useState } from 'react'\nimport { IconButton, Select, Typography } from '@material-ui/core'\nimport { MsaViewModel } from '../model'\nimport { observer } from 'mobx-react'\n\nimport SettingsDialog from './SettingsDlg'\nimport AboutDialog from './AboutDlg'\nimport DetailsDialog from './DetailsDlg'\n\n//icons\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport InfoIcon from '@material-ui/icons/Info'\nimport AssignmentIcon from '@material-ui/icons/Assignment'\n\nconst Header = observer(({ model }: { model: MsaViewModel }) => {\n  const [settingsDialogVisible, setSettingsDialogVisible] = useState(false)\n  const [aboutDialogVisible, setAboutDialogVisible] = useState(false)\n  const [detailsDialogVisible, setDetailsDialogVisible] = useState(false)\n  const { currentAlignment, alignmentNames } = model\n\n  return (\n    <div style={{ display: 'block' }}>\n      <IconButton\n        onClick={() => {\n          model.setData({ tree: '', msa: '' })\n          model.setTreeFilehandle(undefined)\n          model.setMSAFilehandle(undefined)\n          model.setScrollY(0)\n          model.setScrollX(0)\n          model.setCurrentAlignment(0)\n        }}\n      >\n        <FolderOpenIcon />\n      </IconButton>\n      <IconButton\n        onClick={() => {\n          setSettingsDialogVisible(true)\n        }}\n      >\n        <SettingsIcon />\n      </IconButton>\n\n      <IconButton\n        onClick={() => {\n          setAboutDialogVisible(true)\n        }}\n      >\n        <InfoIcon />\n      </IconButton>\n\n      <IconButton\n        onClick={() => {\n          setDetailsDialogVisible(true)\n        }}\n      >\n        <AssignmentIcon />\n      </IconButton>\n      {settingsDialogVisible ? (\n        <SettingsDialog\n          open\n          model={model}\n          onClose={() => setSettingsDialogVisible(false)}\n        />\n      ) : null}\n      {aboutDialogVisible ? (\n        <AboutDialog open onClose={() => setAboutDialogVisible(false)} />\n      ) : null}\n\n      {detailsDialogVisible ? (\n        <DetailsDialog\n          open\n          model={model}\n          onClose={() => setDetailsDialogVisible(false)}\n        />\n      ) : null}\n      {alignmentNames.length > 0 ? (\n        <Select\n          native\n          value={currentAlignment}\n          onChange={(event) => {\n            model.setCurrentAlignment(+(event.target.value as string))\n            model.setScrollX(0)\n            model.setScrollY(0)\n          }}\n        >\n          {alignmentNames.map((option, index) => (\n            <option key={option + '-' + index} value={index}>\n              {option}\n            </option>\n          ))}\n        </Select>\n      ) : null}\n      <Typography display=\"inline\">\n        Row name: {model.mouseOverRowName}\n      </Typography>\n      <span style={{ marginLeft: 10 }} />\n\n      <Typography display=\"inline\">Position: {model.mouseCol}</Typography>\n    </div>\n  )\n})\n\nexport default Header\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  TextField,\n} from '@material-ui/core'\n\nimport { MsaViewModel } from '../model'\nimport colorSchemes from '../colorSchemes'\n\nexport default observer(\n  ({\n    model,\n    onClose,\n    open,\n  }: {\n    model: MsaViewModel\n    onClose: () => void\n    open: boolean\n  }) => {\n    const {\n      rowHeight: rowHeightInit,\n      colWidth: colWidthInit,\n      treeWidth: treeWidthInit,\n      colorSchemeName,\n      noTree,\n    } = model\n    const [rowHeight, setRowHeight] = useState('' + rowHeightInit)\n    const [colWidth, setColWidth] = useState('' + colWidthInit)\n    const [treeWidth, setTreeWidth] = useState('' + treeWidthInit)\n\n    function error(n: string) {\n      return Number.isNaN(+n) || +n < 0\n    }\n    const rowHeightError = error(rowHeight)\n    const colWidthError = error(colWidth)\n    const treeWidthError = error(treeWidth)\n\n    return (\n      <Dialog onClose={() => onClose()} open={open}>\n        <DialogTitle>Settings</DialogTitle>\n        <DialogContent>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.showBranchLen}\n                onChange={() => model.toggleBranchLen()}\n              />\n            }\n            label=\"Show branch length\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.bgColor}\n                onChange={() => model.toggleBgColor()}\n              />\n            }\n            label=\"Color background\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.drawNodeBubbles}\n                onChange={() => model.toggleNodeBubbles()}\n              />\n            }\n            label=\"Draw node bubbles\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.drawTree}\n                onChange={() => model.toggleDrawTree()}\n              />\n            }\n            label=\"Draw tree (if available)\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.labelsAlignRight}\n                onChange={() => model.toggleLabelsAlignRight()}\n              />\n            }\n            label=\"Labels align right (note: labels may draw over tree, but can adjust tree width or tree area width in UI)\"\n          />\n\n          <TextField\n            label=\"Row height (px)\"\n            value={rowHeight}\n            error={rowHeightError}\n            onChange={(event) => setRowHeight(event.target.value)}\n          />\n          <TextField\n            label=\"Column width (px)\"\n            value={colWidth}\n            error={colWidthError}\n            onChange={(event) => setColWidth(event.target.value)}\n          />\n          <br />\n          {!noTree ? (\n            <TextField\n              label=\"Tree width (px)\"\n              value={treeWidth}\n              error={treeWidthError}\n              onChange={(event) => setTreeWidth(event.target.value)}\n            />\n          ) : null}\n\n          <br />\n\n          <TextField\n            select\n            label=\"Color scheme\"\n            value={colorSchemeName}\n            onChange={(event) => model.setColorSchemeName(event.target.value)}\n          >\n            {Object.keys(colorSchemes).map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </TextField>\n          <br />\n          <br />\n          <br />\n          <Button\n            disabled={rowHeightError || colWidthError || treeWidthError}\n            onClick={() => {\n              model.setRowHeight(+rowHeight)\n              model.setColWidth(+colWidth)\n              if (!noTree) {\n                model.setTreeWidth(+treeWidth)\n              }\n              onClose()\n            }}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Submit\n          </Button>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n","import React, { useState } from 'react'\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Typography,\n  Link,\n} from '@material-ui/core'\n\nfunction LicenseDialog({\n  onClose,\n  open,\n}: {\n  onClose: () => void\n  open: boolean\n}) {\n  return (\n    <Dialog onClose={() => onClose()} open={open}>\n      <DialogTitle>Biotite License</DialogTitle>\n      <DialogContent>\n        <pre style={{ height: 100, overflow: 'auto' }}>\n          {`\nCopyright 2017 - 2020, The Biotite contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        `}\n        </pre>\n      </DialogContent>\n    </Dialog>\n  )\n}\nexport default function AboutDialog({\n  onClose,\n  open,\n}: {\n  onClose: () => void\n  open: boolean\n}) {\n  const [dlgOpen, setDlgOpen] = useState(false)\n  return (\n    <>\n      <LicenseDialog onClose={() => setDlgOpen(false)} open={dlgOpen} />\n      <Dialog onClose={() => onClose()} open={open}>\n        <DialogTitle>About this plugin</DialogTitle>\n        <DialogContent>\n          <Typography>\n            JBrowse 2 MSAView plugin v1.0.0 (\n            <Link href=\"https://github.com/gmod/jbrowse-plugin-msaview\">\n              Github\n            </Link>\n            )\n          </Typography>\n\n          <ul>\n            <li>\n              <Typography>\n                We use some color schemes from the{' '}\n                <Link href=\"https://github.com/biotite-dev/biotite\">\n                  biotite\n                </Link>{' '}\n                project, and their license is reproduced{' '}\n                <Link onClick={() => setDlgOpen(true)}>here</Link>\n              </Typography>\n            </li>\n            <li>\n              <Typography>\n                See this page for some information on jalview colorings{' '}\n                <Link href=\"https://www.jalview.org/help/html/colourSchemes/\">\n                  here\n                </Link>\n              </Typography>\n            </li>\n            <li>\n              <Typography>\n                See this page for some info on the clustal, cinema, maeditor,\n                and lesk color schemes{' '}\n                <Link href=\"http://www.bioinformatics.nl/~berndb/aacolour.html\">\n                  here\n                </Link>\n              </Typography>\n            </li>\n            <li>\n              <Typography>\n                See this paper about the flower color scheme{' '}\n                <Link href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7245768/\">\n                  here\n                </Link>\n              </Typography>\n            </li>\n          </ul>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent } from '@material-ui/core'\nimport { observer } from 'mobx-react'\nimport { Attributes } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { MsaViewModel } from '../model'\n\nexport default observer(\n  ({\n    model,\n    onClose,\n    open,\n  }: {\n    model: MsaViewModel\n    onClose: () => void\n    open: boolean\n  }) => {\n    const { alignmentDetails } = model\n\n    return (\n      <Dialog onClose={() => onClose()} open={open}>\n        <DialogTitle>Metadata</DialogTitle>\n        <DialogContent>\n          <Attributes attributes={alignmentDetails} />\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n","import { Instance, cast, types, addDisposer, SnapshotIn } from 'mobx-state-tree'\nimport { hierarchy, cluster, HierarchyNode } from 'd3-hierarchy'\nimport { ascending, max } from 'd3-array'\nimport { FileLocation, ElementId } from '@jbrowse/core/util/types/mst'\nimport { FileLocation as FileLocationType } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { autorun } from 'mobx'\nimport BaseViewModel from '@jbrowse/core/pluggableElementTypes/models/BaseViewModel'\n\nimport Stockholm from 'stockholm-js'\nimport ClustalMSA from './parsers/ClustalMSA'\nimport StockholmMSA from './parsers/StockholmMSA'\nimport FastaMSA from './parsers/FastaMSA'\nimport parseNewick from './parseNewick'\nimport { generateNodeIds, NodeWithIds } from './util'\n\nfunction setBrLength(d: HierarchyNode<any>, y0: number, k: number) {\n  //@ts-ignore\n  d.len = (y0 += Math.max(d.data.length || 0, 0)) * k\n  if (d.children) {\n    d.children.forEach((d) => {\n      setBrLength(d, y0, k)\n    })\n  }\n}\n\nfunction maxLength(d: HierarchyNode<any>): number {\n  return (d.data.length || 1) + (d.children ? max(d.children, maxLength) : 0)\n}\n\n// note: we don't use this.root because it won't update in response to changes\n// in realWidth/totalHeight here otherwise, needs to generate a new object\nfunction getRoot(tree: any) {\n  return hierarchy(tree, (d) => d.branchset)\n    .sum((d) => (d.branchset ? 0 : 1))\n    .sort((a, b) => {\n      return ascending(a.data.length || 1, b.data.length || 1)\n    })\n}\n\nfunction filter(tree: NodeWithIds, collapsed: string[]): NodeWithIds {\n  const { branchset, ...rest } = tree\n  if (collapsed.includes(tree.id)) {\n    return rest\n  } else if (branchset) {\n    return {\n      ...rest,\n      branchset: branchset.map((b) => filter(b, collapsed)),\n    }\n  } else {\n    return tree\n  }\n}\n\nfunction clamp(min: number, num: number, max: number) {\n  return Math.min(Math.max(num, min), max)\n}\nconst StructureModel = types.model({\n  id: types.identifier,\n  structure: types.model({\n    pdb: types.string,\n    startPos: types.number,\n    endPos: types.number,\n  }),\n  range: types.maybe(types.string),\n})\nconst model = types.snapshotProcessor(\n  types\n    .compose(\n      BaseViewModel,\n      types\n        .model('MsaView', {\n          id: ElementId,\n          type: types.literal('MsaView'),\n          height: types.optional(types.number, 550),\n          treeAreaWidth: types.optional(types.number, 400),\n          treeWidth: types.optional(types.number, 300),\n          rowHeight: 20,\n          scrollY: 0,\n          scrollX: 0,\n          blockSize: 1000,\n          mouseRow: types.maybe(types.number),\n          mouseCol: types.maybe(types.number),\n          selectedStructures: types.array(StructureModel),\n          labelsAlignRight: false,\n          colWidth: 16,\n          showBranchLen: true,\n          bgColor: true,\n          drawTree: true,\n          drawNodeBubbles: true,\n          colorSchemeName: 'maeditor',\n          treeFilehandle: types.maybe(FileLocation),\n          msaFilehandle: types.maybe(FileLocation),\n          currentAlignment: 0,\n          collapsed: types.array(types.string),\n          data: types.optional(\n            types\n              .model({\n                tree: types.maybe(types.string),\n                msa: types.maybe(types.string),\n              })\n              .actions((self) => ({\n                setTree(tree?: string) {\n                  self.tree = tree\n                },\n                setMSA(msa?: string) {\n                  self.msa = msa\n                },\n              })),\n            { tree: '', msa: '' },\n          ),\n        })\n        .volatile(() => ({\n          error: undefined as Error | undefined,\n          margin: { left: 20, top: 20 },\n        }))\n        .actions((self) => ({\n          addStructureToSelection(elt: SnapshotIn<typeof StructureModel>) {\n            self.selectedStructures.push(elt)\n          },\n          removeStructureFromSelection(elt: SnapshotIn<typeof StructureModel>) {\n            const r = self.selectedStructures.find((node) => node.id === elt.id)\n            if (r) {\n              self.selectedStructures.remove(r)\n            }\n          },\n          toggleStructureSelection(elt: {\n            id: string\n            structure: { startPos: number; endPos: number; pdb: string }\n          }) {\n            const r = self.selectedStructures.find((node) => node.id === elt.id)\n            if (r) {\n              self.selectedStructures.remove(r)\n            } else {\n              self.selectedStructures.push(elt)\n            }\n          },\n          clearSelectedStructures() {\n            //@ts-ignore\n            self.selectedStructures = []\n          },\n          setError(error?: Error) {\n            self.error = error\n          },\n          setMousePos(col?: number, row?: number) {\n            self.mouseCol = col\n            self.mouseRow = row\n          },\n          setRowHeight(n: number) {\n            self.rowHeight = n\n          },\n          setColWidth(n: number) {\n            self.colWidth = n\n          },\n          setColorSchemeName(name: string) {\n            self.colorSchemeName = name\n          },\n          setScrollY(n: number) {\n            self.scrollY = n\n          },\n          setScrollX(n: number) {\n            self.scrollX = n\n          },\n          setTreeAreaWidth(n: number) {\n            self.treeAreaWidth = n\n          },\n          setTreeWidth(n: number) {\n            self.treeWidth = n\n          },\n          setCurrentAlignment(n: number) {\n            self.currentAlignment = n\n          },\n          toggleLabelsAlignRight() {\n            self.labelsAlignRight = !self.labelsAlignRight\n          },\n          toggleDrawTree() {\n            self.drawTree = !self.drawTree\n          },\n          toggleCollapsed(node: string) {\n            if (self.collapsed.includes(node)) {\n              self.collapsed.remove(node)\n            } else {\n              self.collapsed.push(node)\n            }\n          },\n          toggleBranchLen() {\n            self.showBranchLen = !self.showBranchLen\n          },\n          toggleBgColor() {\n            self.bgColor = !self.bgColor\n          },\n          toggleNodeBubbles() {\n            self.drawNodeBubbles = !self.drawNodeBubbles\n          },\n          setData(data: { msa: string; tree: string }) {\n            self.data = cast(data)\n          },\n          async setMSAFilehandle(msaFilehandle?: FileLocationType) {\n            if (msaFilehandle && 'blobId' in msaFilehandle) {\n              this.setMSA(\n                (await openLocation(msaFilehandle).readFile('utf8')) as string,\n              )\n            } else {\n              self.msaFilehandle = msaFilehandle\n            }\n          },\n          async setTreeFilehandle(treeFilehandle?: FileLocationType) {\n            if (treeFilehandle && 'blobId' in treeFilehandle) {\n              this.setTree(\n                (await openLocation(treeFilehandle).readFile('utf8')) as string,\n              )\n            } else {\n              self.treeFilehandle = treeFilehandle\n            }\n          },\n          setMSA(result: string) {\n            self.data.setMSA(result)\n          },\n          setTree(result: string) {\n            self.data.setTree(result)\n          },\n\n          afterCreate() {\n            addDisposer(\n              self,\n              autorun(async () => {\n                const { treeFilehandle } = self\n                if (treeFilehandle) {\n                  this.setTree(\n                    (await openLocation(treeFilehandle).readFile(\n                      'utf8',\n                    )) as string,\n                  )\n                }\n              }),\n            )\n            addDisposer(\n              self,\n              autorun(async () => {\n                const { msaFilehandle } = self\n\n                if (msaFilehandle) {\n                  this.setMSA(\n                    (await openLocation(msaFilehandle).readFile(\n                      'utf8',\n                    )) as string,\n                  )\n                }\n              }),\n            )\n          },\n        }))\n        .views((self) => {\n          let oldBlocksX: number[] = []\n          let oldBlocksY: number[] = []\n          let oldValX = 0\n          let oldValY = 0\n          return {\n            get initialized() {\n              return (\n                self.data.msa ||\n                self.data.tree ||\n                self.msaFilehandle ||\n                self.treeFilehandle\n              )\n            },\n\n            get blocksX() {\n              const { scrollX, blockSize: size, colWidth } = self\n              const ret = -(size * Math.floor(scrollX / size)) - size\n\n              const b = []\n              for (let i = ret; i < ret + size * 3; i += size) {\n                if (i + size > 0) {\n                  b.push(i)\n                }\n              }\n              if (\n                JSON.stringify(b) !== JSON.stringify(oldBlocksX) ||\n                colWidth !== oldValX\n              ) {\n                oldBlocksX = b\n                oldValX = colWidth\n              }\n              return oldBlocksX\n            },\n\n            get blocksY() {\n              const { scrollY, blockSize: size, rowHeight } = self\n              const ret = -(size * Math.floor(scrollY / size)) - 2 * size\n\n              const b = []\n              for (let i = ret; i < ret + size * 3; i += size) {\n                if (i + size > 0) {\n                  b.push(i)\n                }\n              }\n              if (\n                JSON.stringify(b) !== JSON.stringify(oldBlocksY) ||\n                rowHeight !== oldValY\n              ) {\n                oldBlocksY = b\n                oldValY = rowHeight\n              }\n              return oldBlocksY\n            },\n\n            get done() {\n              return this.initialized && (self.data.msa || self.data.tree)\n            },\n\n            get alignmentDetails() {\n              return this.MSA?.getDetails() || {}\n            },\n\n            get currentAlignmentName() {\n              return this.alignmentNames[self.currentAlignment]\n            },\n\n            get alignmentNames() {\n              return this.MSA?.alignmentNames || []\n            },\n\n            get noTree() {\n              return !!this.tree.noTree\n            },\n\n            get menuItems() {\n              return []\n            },\n\n            get MSA() {\n              const text = self.data.msa\n              if (text) {\n                if (Stockholm.sniff(text)) {\n                  return new StockholmMSA(text, self.currentAlignment)\n                } else if (text.startsWith('>')) {\n                  return new FastaMSA(text)\n                } else {\n                  return new ClustalMSA(text)\n                }\n              }\n              return null\n            },\n\n            get numColumns() {\n              return (\n                ((this.MSA?.getWidth() || 0) - this.blanks.length) *\n                self.colWidth\n              )\n            },\n\n            get tree() {\n              const {\n                data: { tree },\n                collapsed,\n              } = self\n              const t = tree\n                ? generateNodeIds(parseNewick(tree))\n                : this.MSA?.getTree()\n\n              return t ? filter(t, collapsed) : { noTree: true }\n            },\n\n            get rowNames(): string[] {\n              return this.hierarchy\n                .leaves()\n                .map((node: { data: { name: string } }) => node.data.name)\n            },\n\n            get mouseOverRowName() {\n              return self.mouseRow !== undefined\n                ? this.rowNames[self.mouseRow]\n                : undefined\n            },\n\n            getMouseOverResidue(rowName: string) {\n              return this.columns[rowName]\n            },\n\n            get root() {\n              return getRoot(this.tree)\n            },\n\n            get structures(): {\n              [key: string]: {\n                pdb: string\n                startPos: number\n                endPos: number\n              }[]\n            } {\n              return this.MSA?.getStructures() || {}\n            },\n\n            get inverseStructures() {\n              return Object.fromEntries(\n                Object.entries(this.structures)\n                  .map(([key, val]) => {\n                    return val.map((pdbEntry) => [\n                      pdbEntry.pdb,\n                      {\n                        id: key,\n                      },\n                    ])\n                  })\n                  .flat(),\n              )\n            },\n\n            get msaAreaWidth() {\n              //@ts-ignore\n              return self.width - self.treeAreaWidth\n            },\n\n            get blanks() {\n              const blanks = []\n              const strs = this.hierarchy\n                .leaves()\n                .map(({ data }) => this.MSA?.getRow(data.name))\n                .filter((item): item is string[] => !!item)\n\n              for (let i = 0; i < strs[0]?.length; i++) {\n                let counter = 0\n                for (let j = 0; j < strs.length; j++) {\n                  if (strs[j][i] === '-') {\n                    counter++\n                  }\n                }\n                if (counter === strs.length) {\n                  blanks.push(i)\n                }\n              }\n              return blanks\n            },\n\n            get columns(): Record<string, string> {\n              const rows = this.hierarchy\n                .leaves()\n                .map(({ data }) => [data.name, this.MSA?.getRow(data.name)])\n                .filter((f) => !!f[1])\n              const strs = rows.map((row) => row[1])\n\n              const ret: string[] = []\n              for (let i = 0; i < strs.length; i++) {\n                let s = ''\n                let b = 0\n                for (let j = 0; j < strs[i].length; j++) {\n                  if (j === this.blanks[b]) {\n                    b++\n                  } else {\n                    s += strs[i][j]\n                  }\n                }\n                ret.push(s)\n              }\n              return Object.fromEntries(\n                rows.map((row, index) => [row[0], ret[index]]),\n              )\n            },\n\n            // generates a new tree that is clustered with x,y positions\n            get hierarchy() {\n              const root = getRoot(this.tree)\n              const clust = cluster()\n                .size([this.totalHeight, self.treeWidth])\n                .separation(() => 1)\n              clust(root)\n              setBrLength(\n                root,\n                (root.data.length = 0),\n                self.treeWidth / maxLength(root),\n              )\n              return root\n            },\n\n            get totalHeight() {\n              return this.root.leaves().length * self.rowHeight\n            },\n          }\n        }),\n    )\n    .actions((self) => ({\n      doScrollY(deltaY: number) {\n        self.scrollY = clamp(-self.totalHeight + 10, self.scrollY + deltaY, 10)\n      },\n\n      doScrollX(deltaX: number) {\n        self.scrollX = clamp(\n          -self.numColumns + (self.msaAreaWidth - 100),\n          self.scrollX + deltaX,\n          0,\n        )\n      },\n      setMouseoveredColumn(n: number, chain: string, file: string) {\n        let j = 0\n        let i = 0\n        const { id } = self.inverseStructures[file.slice(0, -4)] || {}\n        const row = self.MSA?.getRow(id)\n\n        if (row) {\n          for (i = 0; i < row.length && j < n; i++) {\n            if (row[i] !== '-') {\n              j++\n            }\n          }\n          self.mouseCol = j + 1\n        } else {\n          self.mouseCol = undefined\n        }\n      },\n    })),\n  {\n    postProcessor(result) {\n      const { data, ...rest } = result\n      return rest\n    },\n  },\n)\n\nexport default model\n\nexport type MsaViewStateModel = typeof model\nexport type MsaViewModel = Instance<MsaViewStateModel>\n","import * as Clustal from 'clustal-js'\nexport default class ClustalMSA {\n  private MSA: {\n    header: Record<string, any>\n    alns: { id: string; seq: string }[]\n  }\n\n  constructor(text: string) {\n    this.MSA = Clustal.parse(text)\n  }\n\n  getMSA() {\n    return this.MSA\n  }\n\n  getRow(name: string) {\n    return this.MSA.alns.find((aln) => aln.id === name)?.seq.split('')\n  }\n\n  getWidth() {\n    return this.MSA.alns[0].seq.length\n  }\n\n  getDetails() {\n    return this.MSA.header\n  }\n\n  getNames() {\n    return this.MSA.alns.map((aln) => aln.id)\n  }\n\n  getStructures() {\n    return {}\n  }\n\n  get alignmentNames() {\n    return []\n  }\n\n  getTree() {\n    return {\n      id: 'root',\n      noTree: true,\n      branchset: this.getNames().map((name) => ({ id: name, name })),\n    }\n  }\n}\n","import Stockholm from 'stockholm-js'\nimport parseNewick from '../parseNewick'\n\nimport { generateNodeIds } from '../util'\ntype StockholmEntry = {\n  gf: {\n    DE?: string[]\n    NH?: string[]\n  }\n  gs: {\n    AC: Record<string, string>\n    DR: Record<string, string>\n  }\n  seqdata: { [key: string]: string }\n}\n\nexport default class StockholmMSA {\n  private data: StockholmEntry[]\n  private MSA: StockholmEntry\n\n  constructor(text: string, currentAlignment: number) {\n    const res = Stockholm.parseAll(text)\n    this.data = res\n    this.MSA = res[currentAlignment]\n  }\n\n  getMSA() {\n    return this.MSA\n  }\n\n  getRow(name: string) {\n    return this.MSA?.seqdata[name]?.split('')\n  }\n\n  getWidth() {\n    const name = Object.keys(this.MSA?.seqdata)[0]\n    return this.getRow(name).length\n  }\n\n  get alignmentNames() {\n    return this.data.map(\n      (aln, index) => aln.gf.DE?.[0] || `Alignment ${index + 1}`,\n    )\n  }\n\n  getDetails() {\n    return this.MSA.gf\n  }\n\n  getNames() {\n    return Object.keys(this.MSA.seqdata)\n  }\n\n  getSeqCoords() {}\n\n  getStructures() {\n    const pdbRegex = /PDB; +(\\S+) +(\\S); ([0-9]+)-([0-9]+)/\n    const ent = this.MSA\n    return Object.entries(ent.gs?.DR || {})\n      .map(([id, dr]) => [id, pdbRegex.exec(dr)])\n      .filter((item): item is [string, RegExpExecArray] => !!item[1])\n      .map(([id, match]: [string, RegExpExecArray]) => {\n        const pdb = match[1].toLowerCase()\n        const chain = match[2]\n        const startPos = +match[3]\n        const endPos = +match[4]\n        return { id, pdb, chain, startPos, endPos }\n      })\n      .reduce((a, b) => {\n        const { id, ...rest } = b\n        if (!a[id]) {\n          a[id] = []\n        }\n        a[id].push(rest)\n        return a\n      }, {} as Record<string, { pdb: string; chain: string; startPos: number; endPos: number }[]>)\n  }\n\n  getTree() {\n    const tree = this.MSA?.gf?.NH?.[0]\n    return tree\n      ? generateNodeIds(parseNewick(tree))\n      : {\n          id: 'root',\n          noTree: true,\n          branchset: this.getNames().map((name) => ({\n            id: name,\n            name,\n          })),\n        }\n  }\n}\n","type StrMap = { [key: string]: string }\nexport default class FastaMSA {\n  private MSA: { seqdata: { [key: string]: string } }\n  constructor(text: string) {\n    const seq: StrMap = {}\n    let name = ''\n    const re = /^>(\\S+)/\n    text.split('\\n').forEach((line) => {\n      const match = re.exec(line)\n      if (match) {\n        seq[(name = match[1])] = ''\n      } else if (name) {\n        seq[name] = seq[name] + line.replace(/[ \\t]/g, '')\n      }\n    })\n    this.MSA = { seqdata: seq }\n  }\n\n  getMSA() {\n    return this.MSA\n  }\n\n  getNames() {\n    return Object.keys(this.MSA.seqdata)\n  }\n\n  getRow(name: string) {\n    return this.MSA?.seqdata[name]?.split('')\n  }\n\n  getWidth() {\n    const name = Object.keys(this.MSA?.seqdata)[0]\n    return this.getRow(name).length\n  }\n\n  getStructures() {\n    return {}\n  }\n\n  get alignmentNames() {\n    return []\n  }\n\n  getDetails() {\n    return {}\n  }\n\n  getTree() {\n    return {\n      id: 'root',\n      noTree: true,\n      branchset: this.getNames().map((name) => ({\n        id: name,\n        name,\n      })),\n    }\n  }\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Button, Select, MenuItem, TextField, Grid } from \"@material-ui/core\";\nimport { Stage, StaticDatasource, DatasourceRegistry } from \"ngl\";\n\nDatasourceRegistry.add(\n  \"data\",\n  new StaticDatasource(\"https://files.rcsb.org/download/\")\n);\n\nexport const ProteinPanel = observer(({ model }) => {\n  const [type, setType] = useState(\"cartoon\");\n  const [res, setRes] = useState([]);\n  const [annotation, setAnnotation] = useState();\n  const [stage, setStage] = useState();\n  const [isMouseHovering, setMouseHovering] = useState(false);\n  const { msaview, nglSelection } = model;\n  const { selectedStructures, mouseCol } = msaview;\n\n  console.log(msaview.getMouseOverResidue(3));\n\n  const stageElementRef = useCallback((element) => {\n    if (element) {\n      const currentStage = new Stage(element);\n      setStage(currentStage);\n    }\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (stage) {\n        stage.dispose();\n      }\n    };\n  }, [stage]);\n\n  useEffect(() => {\n    if (!selectedStructures.length || !stage) {\n      return;\n    }\n    (async () => {\n      // Handle window resizing\n      window.addEventListener(\"resize\", () => {\n        stage.handleResize();\n      });\n\n      const res = await Promise.all(\n        selectedStructures.map((selection) => {\n          return stage.loadFile(`data://${selection.structure.pdb}.pdb`);\n        })\n      );\n      setRes(res);\n\n      stage.signals.hovered.add((pickingProxy) => {\n        if (pickingProxy && (pickingProxy.atom || pickingProxy.bond)) {\n          const atom = pickingProxy.atom || pickingProxy.closestBondAtom;\n          msaview.setMouseoveredColumn(\n            atom.resno - selectedStructures[0].structure.startPos,\n            atom.chainname,\n            pickingProxy.picker.structure.name\n          );\n        }\n      });\n    })();\n  }, [JSON.stringify(selectedStructures), stage]);\n\n  useEffect(() => {\n    if (stage) {\n      res.forEach((elt) => {\n        elt.removeAllRepresentations();\n        elt.addRepresentation(type, { sele: nglSelection });\n      });\n      stage.autoView();\n    }\n  }, [type, res, stage, nglSelection]);\n\n  useEffect(() => {\n    if (!isMouseHovering) {\n      const annots = [];\n      res.forEach((elt, index) => {\n        if (annotation) {\n          elt.removeAnnotation(annotation[index]);\n        }\n        if (mouseCol !== undefined) {\n          const { startPos } = selectedStructures[0].structure;\n\n          let k;\n          const rn = elt.structure.residueStore.count;\n          const rp = elt.structure.getResidueProxy();\n          for (let i = 0; i < rn; ++i) {\n            rp.index = i;\n            if (rp.resno === mouseCol + startPos - 1) {\n              k = rp;\n              break;\n            }\n          }\n\n          if (k) {\n            const ap = elt.structure.getAtomProxy();\n            ap.index = k.atomOffset;\n\n            annots.push(\n              elt.addAnnotation(ap.positionToVector3(), k.qualifiedName())\n            );\n          }\n        }\n        stage.viewer.requestRender();\n      });\n      setAnnotation(annots);\n    }\n  }, [model, mouseCol, isMouseHovering]);\n\n  return selectedStructures.length ? (\n    <div style={{ padding: 20 }}>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Button onClick={() => msaview.clearSelection()} variant=\"contained\">\n          Clear\n        </Button>\n\n        <div style={{ width: 20 }} />\n        <Select value={type} onChange={(event) => setType(event.target.value)}>\n          <MenuItem value={\"cartoon\"}>cartoon</MenuItem>\n          <MenuItem value={\"ball+stick\"}>ball+stick</MenuItem>\n        </Select>\n        <div style={{ width: 20 }} />\n        <TextField\n          variant=\"outlined\"\n          label=\"Selection\"\n          value={nglSelection}\n          onChange={(event) => model.setNGLSelection(event.target.value)}\n        />\n      </div>\n\n      <div\n        ref={stageElementRef}\n        style={{ width: 600, height: 400 }}\n        onMouseEnter={() => setMouseHovering(true)}\n        onMouseLeave={() => setMouseHovering(false)}\n      />\n    </div>\n  ) : null;\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { types, onSnapshot } from \"mobx-state-tree\";\nimport { MSAView, MSAModel } from \"react-msaview\";\nimport { createJBrowseTheme } from \"@jbrowse/core/ui/theme\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { throttle } from \"lodash\";\n\nimport { ProteinPanel } from \"./ProteinPanel\";\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst val = urlParams.get(\"data\");\n\nconst global = types\n  .model({\n    msaview: MSAModel,\n    nglSelection: types.optional(types.string, \"\"),\n  })\n  .actions((self) => ({\n    setNGLSelection(sel) {\n      self.nglSelection = sel;\n    },\n  }))\n  .create(val ? JSON.parse(val) : { msaview: { type: \"MsaView\" } });\n\nglobal.msaview.setWidth(window.innerWidth);\n\nonSnapshot(\n  global,\n  throttle((snap) => {\n    const url = new URL(window.document.URL);\n    url.searchParams.set(\"data\", JSON.stringify(snap));\n    window.history.replaceState(null, \"\", url.toString());\n  }, 500)\n);\n\n// Handle window resizing\nwindow.addEventListener(\"resize\", () => {\n  global.msaview.setWidth(window.innerWidth);\n});\n\nconst App = observer(({ model }) => {\n  const { msaview } = model;\n  return (\n    <div>\n      <div style={{ border: \"1px solid black\", margin: 20 }}>\n        <MSAView model={msaview} />\n      </div>\n      <ProteinPanel model={model} />\n    </div>\n  );\n});\n\nexport default () => {\n  const theme = createJBrowseTheme();\n  return (\n    <ThemeProvider theme={theme}>\n      <App model={global} />\n    </ThemeProvider>\n  );\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}