{"version":3,"sources":["../../src/index.ts","../../src/colorSchemes.ts","../../src/util.ts","../../../src/components/MSAView.tsx","../../../src/components/ImportForm.tsx","../../../components/data/seq2.js","../../../src/components/TreeCanvas.tsx","../../../src/components/MSACanvas.tsx","../../../src/components/Header.tsx","../../../src/components/SettingsDlg.tsx","../../../src/components/AboutDlg.tsx","../../../src/components/DetailsDlg.tsx","../../src/model.ts","../../src/parseNewick.js","App.js","reportWebVitals.js","index.js"],"names":["transform","clustal","G","P","S","T","H","K","R","F","W","Y","I","L","M","V","lesk","A","C","N","Q","D","E","maeditor","flower","rainbow_dna","U","clustalx_protein","clustalx_dna","jalview_buried","B","X","Z","jalview_hydrophobicity","jalview_prophelix","jalview_propstrand","jalview_propturn","jalview_taylor","jalview_zappo","cinema","key","val","letter","color","Object","observer","model","done","height","style","overflow","position","display","variant","msaFile","setMsaFile","treeFile","setTreeFile","width","container","spacing","justify","alignItems","item","location","setLocation","localFileAllowed","onClick","disabled","href","uri","msa","smallMSA","tree","smallTree","transaction","radius","TreeBlock","offsetY","ref","useRef","menuRef","clickRef","useState","colorMap","setColorMap","hovering","setHovering","hierarchy","rowHeight","scrollY","treeWidth","showBranchLen","collapsed","margin","noTree","blockSize","drawNodeBubbles","x","event","y","clickCtx","data","col","useEffect","ctx","colorHash","context","font","Math","source","target","sy","sx","ty","tx","y1","y2","node","id","name","r","g","b","len","left","top","anchorEl","transitionDuration","keepMounted","open","Boolean","onClose","handleClose","dense","onMouseMove","decode","scheduled","deltaY","blocksY","curr","requestAnimationFrame","origEvent","block","MSABlock","offsetX","MSA","colWidth","bgColor","columns","scrollX","colorSchemeName","theme","colorScheme","colorSchemes","colorContrast","useMemo","leaves","yStart","yEnd","xStart","xEnd","visibleLeaves","str","i","contrast","msaFilehandle","blocksX","deltaX","blockY","settingsDialogVisible","setSettingsDialogVisible","aboutDialogVisible","setAboutDialogVisible","detailsDialogVisible","setDetailsDialogVisible","currentAlignment","alignmentNames","native","value","onChange","option","index","rowHeightInit","colWidthInit","nameWidthInit","treeWidthInit","setRowHeight","setColWidth","nameWidth","setNameWidth","setTreeWidth","Number","n","rowHeightError","error","colWidthError","nameWidthError","treeWidthError","control","checked","label","select","dlgOpen","setDlgOpen","LicenseDialog","alignmentDetails","attributes","ClustalMSA","this","Clustal","alns","find","aln","seq","branchset","FastaMSA","re","text","match","line","seqdata","getRow","StockholmMSA","res","Stockholm","map","generateNodeIds","setBrLength","d","y0","maxLength","max","getRoot","ascending","a","parent","depth","filter","rest","clamp","min","types","BaseViewModel","ElementId","type","treeAreaWidth","treeFilehandle","FileLocation","setTree","self","setMSA","volatileWidth","setError","setColorSchemeName","setScrollY","setScrollX","setCurrentAlignment","toggleCollapsed","toggleBranchLen","toggleBgColor","toggleNodeBubbles","setData","cast","setWidth","setMSAFilehandle","openLocation","setTreeFilehandle","afterCreate","addDisposer","autorun","oldBlocksX","oldBlocksY","oldValX","oldValY","size","ret","JSON","blanks","t","strs","counter","j","rows","f","row","s","root","cluster","clust","treeWidthMinusNames","length","doScrollY","doScrollX","postProcessor","result","ancestors","tokens","token","subtree","parseFloat","createJBrowseTheme","MSAModel","create","random","ThemeProvider","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1da6b1fd.chunk.js","sourcesContent":["import MSAView from './components/MSAView';\nimport MSAModel from './model';\n\nexport { MSAModel, MSAView };\n","import Color from \"color\";\nimport { transform } from \"./util\";\n\nconst colorSchemes = {\n  clustal: {\n    G: \"orange\",\n    P: \"orange\",\n    S: \"orange\",\n    T: \"orange\",\n    H: \"red\",\n    K: \"red\",\n    R: \"red\",\n    F: \"blue\",\n    W: \"blue\",\n    Y: \"blue\",\n    I: \"green\",\n    L: \"green\",\n    M: \"green\",\n    V: \"green\",\n  },\n  lesk: {\n    G: \"orange\",\n    A: \"orange\",\n    S: \"orange\",\n    T: \"orange\",\n    C: \"green\",\n    V: \"green\",\n    I: \"green\",\n    L: \"green\",\n    P: \"green\",\n    F: \"green\",\n    Y: \"green\",\n    M: \"green\",\n    W: \"green\",\n    N: \"magenta\",\n    Q: \"magenta\",\n    H: \"magenta\",\n    D: \"red\",\n    E: \"red\",\n    K: \"blue\",\n    R: \"blue\",\n  },\n  maeditor: {\n    A: \"lightgreen\",\n    G: \"lightgreen\",\n    C: \"green\",\n    D: \"darkgreen\",\n    E: \"darkgreen\",\n    N: \"darkgreen\",\n    Q: \"darkgreen\",\n    I: \"blue\",\n    L: \"blue\",\n    M: \"blue\",\n    V: \"blue\",\n    F: \"#c8a2c8\",\n    W: \"#c8a2c8\",\n    Y: \"#c8a2c8\",\n    H: \"darkblue\",\n    K: \"orange\",\n    R: \"orange\",\n    P: \"pink\",\n    S: \"red\",\n    T: \"red\",\n  },\n\n  //https://github.com/biotite-dev/biotite/blob/8c460972f8ab904312f130dfb80f3efc8c9bd7c5/src/biotite/sequence/graphics/color_schemes/flower.json\n  flower: {\n    A: \"#b18a51\",\n    C: \"#ff5701\",\n    D: \"#01a578\",\n    E: \"#2da0a1\",\n    F: \"#fa559d\",\n    G: \"#b1c23c\",\n    H: \"#0194f9\",\n    I: \"#f27663\",\n    K: \"#7fc3d7\",\n    L: \"#df6e75\",\n    M: \"#fe9daf\",\n    N: \"#0bcec6\",\n    P: \"#4fa32a\",\n    Q: \"#7295ae\",\n    R: \"#83bff1\",\n    S: \"#b4bd9b\",\n    T: \"#d2b576\",\n    V: \"#fd997b\",\n    W: \"#ff2ded\",\n    Y: \"#c96ecf\",\n  },\n  rainbow_dna: {\n    A: \"#3737f5\",\n    C: \"#37f537\",\n    G: \"#f5f537\",\n    T: \"#f53737\",\n    U: \"#f53737\",\n  },\n\n  //https://github.com/biotite-dev/biotite/blob/8c460972f8ab904312f130dfb80f3efc8c9bd7c5/src/biotite/sequence/graphics/color_schemes/clustalx_protein.json\n  clustalx_protein: {\n    A: \"#197fe5\",\n    C: \"#e57f7f\",\n    D: \"#cc4ccc\",\n    E: \"#cc4ccc\",\n    F: \"#197fe5\",\n    G: \"#e5994c\",\n    H: \"#19b2b2\",\n    I: \"#197fe5\",\n    K: \"#e53319\",\n    L: \"#197fe5\",\n    M: \"#197fe5\",\n    N: \"#19cc19\",\n    P: \"#cccc00\",\n    Q: \"#19cc19\",\n    R: \"#e53319\",\n    S: \"#19cc19\",\n    T: \"#19cc19\",\n    V: \"#197fe5\",\n    W: \"#197fe5\",\n    Y: \"#19b2b2\",\n  },\n\n  clustalx_dna: {\n    A: \"#e53319\",\n    C: \"#197fe5\",\n    G: \"#e5994c\",\n    T: \"#19cc19\",\n    U: \"#19cc19\",\n  },\n  jalview_buried: {\n    A: \"#00a35c\",\n    R: \"#00fc03\",\n    N: \"#00eb14\",\n    D: \"#00eb14\",\n    C: \"#0000ff\",\n    Q: \"#00f10e\",\n    E: \"#00f10e\",\n    G: \"#009d62\",\n    H: \"#00d52a\",\n    I: \"#0054ab\",\n    L: \"#007b84\",\n    K: \"#00ff00\",\n    M: \"#009768\",\n    F: \"#008778\",\n    P: \"#00e01f\",\n    S: \"#00d52a\",\n    T: \"#00db24\",\n    W: \"#00a857\",\n    Y: \"#00e619\",\n    V: \"#005fa0\",\n    B: \"#00eb14\",\n    X: \"#00b649\",\n    Z: \"#00f10e\",\n  },\n\n  jalview_hydrophobicity: {\n    A: \"#ad0052\",\n    R: \"#0000ff\",\n    N: \"#0c00f3\",\n    D: \"#0c00f3\",\n    C: \"#c2003d\",\n    Q: \"#0c00f3\",\n    E: \"#0c00f3\",\n    G: \"#6a0095\",\n    H: \"#1500ea\",\n    I: \"#ff0000\",\n    L: \"#ea0015\",\n    K: \"#0000ff\",\n    M: \"#b0004f\",\n    F: \"#cb0034\",\n    P: \"#4600b9\",\n    S: \"#5e00a1\",\n    T: \"#61009e\",\n    W: \"#5b00a4\",\n    Y: \"#4f00b0\",\n    V: \"#f60009\",\n    B: \"#0c00f3\",\n    X: \"#680097\",\n    Z: \"#0c00f3\",\n  },\n\n  jalview_prophelix: {\n    A: \"#e718e7\",\n    R: \"#6f906f\",\n    N: \"#1be41b\",\n    D: \"#778877\",\n    C: \"#23dc23\",\n    Q: \"#926d92\",\n    E: \"#ff00ff\",\n    G: \"#00ff00\",\n    H: \"#758a75\",\n    I: \"#8a758a\",\n    L: \"#ae51ae\",\n    K: \"#a05fa0\",\n    M: \"#ef10ef\",\n    F: \"#986798\",\n    P: \"#00ff00\",\n    S: \"#36c936\",\n    T: \"#47b847\",\n    W: \"#8a758a\",\n    Y: \"#21de21\",\n    V: \"#857a85\",\n    B: \"#49b649\",\n    X: \"#758a75\",\n    Z: \"#c936c9\",\n  },\n\n  jalview_propstrand: {\n    A: \"#5858a7\",\n    R: \"#6b6b94\",\n    N: \"#64649b\",\n    D: \"#2121de\",\n    C: \"#9d9d62\",\n    Q: \"#8c8c73\",\n    E: \"#0000ff\",\n    G: \"#4949b6\",\n    H: \"#60609f\",\n    I: \"#ecec13\",\n    L: \"#b2b24d\",\n    K: \"#4747b8\",\n    M: \"#82827d\",\n    F: \"#c2c23d\",\n    P: \"#2323dc\",\n    S: \"#4949b6\",\n    T: \"#9d9d62\",\n    W: \"#c0c03f\",\n    Y: \"#d3d32c\",\n    V: \"#ffff00\",\n    B: \"#4343bc\",\n    X: \"#797986\",\n    Z: \"#4747b8\",\n  },\n\n  jalview_propturn: {\n    A: \"#2cd3d3\",\n    R: \"#708f8f\",\n    N: \"#ff0000\",\n    D: \"#e81717\",\n    C: \"#a85757\",\n    Q: \"#3fc0c0\",\n    E: \"#778888\",\n    G: \"#ff0000\",\n    H: \"#708f8f\",\n    I: \"#00ffff\",\n    L: \"#1ce3e3\",\n    K: \"#7e8181\",\n    M: \"#1ee1e1\",\n    F: \"#1ee1e1\",\n    P: \"#f60909\",\n    S: \"#e11e1e\",\n    T: \"#738c8c\",\n    W: \"#738c8c\",\n    Y: \"#9d6262\",\n    V: \"#07f8f8\",\n    B: \"#f30c0c\",\n    X: \"#7c8383\",\n    Z: \"#5ba4a4\",\n  },\n\n  jalview_taylor: {\n    A: \"#ccff00\",\n    R: \"#0000ff\",\n    N: \"#cc00ff\",\n    D: \"#ff0000\",\n    C: \"#ffff00\",\n    Q: \"#ff00cc\",\n    E: \"#ff0066\",\n    G: \"#ff9900\",\n    H: \"#0066ff\",\n    I: \"#66ff00\",\n    L: \"#33ff00\",\n    K: \"#6600ff\",\n    M: \"#00ff00\",\n    F: \"#00ff66\",\n    P: \"#ffcc00\",\n    S: \"#ff3300\",\n    T: \"#ff6600\",\n    W: \"#00ccff\",\n    Y: \"#00ffcc\",\n    V: \"#99ff00\",\n  },\n\n  jalview_zappo: {\n    A: \"#ffafaf\",\n    R: \"#6464ff\",\n    N: \"#00ff00\",\n    D: \"#ff0000\",\n    C: \"#ffff00\",\n    Q: \"#00ff00\",\n    E: \"#ff0000\",\n    G: \"#ff00ff\",\n    H: \"#6464ff\",\n    I: \"#ffafaf\",\n    L: \"#ffafaf\",\n    K: \"#6464ff\",\n    M: \"#ffafaf\",\n    F: \"#ffc800\",\n    P: \"#ff00ff\",\n    S: \"#00ff00\",\n    T: \"#00ff00\",\n    W: \"#ffc800\",\n    Y: \"#ffc800\",\n    V: \"#ffafaf\",\n  },\n\n  cinema: {\n    H: \"blue\",\n    K: \"blue\",\n    R: \"blue\",\n    D: \"red\",\n    E: \"red\",\n    S: \"green\",\n    T: \"green\",\n    N: \"green\",\n    Q: \"green\",\n    A: \"white\",\n    V: \"white\",\n    L: \"white\",\n    I: \"white\",\n    M: \"white\",\n    F: \"magenta\",\n    W: \"magenta\",\n    Y: \"magenta\",\n    P: \"brown\",\n    G: \"brown\",\n    C: \"yellow\",\n    B: \"gray\",\n    Z: \"gray\",\n    X: \"gray\",\n    \"-\": \"gray\",\n    \".\": \"gray\",\n  },\n} as { [key: string]: { [key: string]: string } };\n\n// turn all supplied colors to hex colors which getContrastText from mui\n// requires\nexport default transform(colorSchemes, ([key, val]) => [\n  key,\n  transform(val, ([letter, color]) => [letter, Color(color).hex()]),\n]);\n","export function transform<T>(\n  obj: Record<string, T>,\n  cb: (arg0: [string, T]) => [string, T]\n) {\n  return Object.fromEntries(Object.entries(obj).map(cb));\n}\n","import React from 'react';\n//components\n\nimport ImportForm from './ImportForm';\nimport TreeCanvas from './TreeCanvas';\nimport MSACanvas from './MSACanvas';\nimport Header from './Header';\n\nimport { MsaViewModel } from '../model';\nimport { observer } from 'mobx-react';\nimport { Typography } from '@material-ui/core';\n\nexport default observer(({ model }: { model: MsaViewModel }) => {\n  const { done, initialized } = model;\n\n  if (!initialized) {\n    return <ImportForm model={model} />;\n  } else if (!done) {\n    return <Typography variant=\"h4\">Loading...</Typography>;\n  } else {\n    const { height } = model;\n\n    return (\n      <div style={{ height, overflow: 'hidden' }}>\n        <Header model={model} />\n        <div\n          style={{\n            position: 'relative',\n            display: 'flex',\n          }}\n        >\n          <TreeCanvas model={model} />\n          <MSACanvas model={model} />\n        </div>\n      </div>\n    );\n  }\n});\n","import React, { useState } from 'react'\nimport { Button, Container, Grid, Typography, Link } from '@material-ui/core'\nimport { observer } from 'mobx-react'\nimport { transaction } from 'mobx'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { MsaViewModel } from '../model'\nimport { smallTree, smallMSA } from './data/seq2'\n\nexport default observer(({ model }: { model: MsaViewModel }) => {\n  const [msaFile, setMsaFile] = useState()\n  const [treeFile, setTreeFile] = useState()\n\n  return (\n    <Container>\n      <div style={{ width: '50%' }}>\n        <Typography>\n          Open an MSA file (stockholm or clustal format) and/or a tree file\n          (newick format).\n        </Typography>\n        <Typography color=\"error\">\n          Note: you can open up just an MSA or just a tree, both are not\n          required. Some MSA files e.g. stockholm format have an embedded tree\n          also and this is fine, and opening a separate tree file is not\n          required.\n        </Typography>\n      </div>\n\n      <Grid container spacing={10} justify=\"center\" alignItems=\"center\">\n        <Grid item>\n          <Typography>MSA file or URL</Typography>\n          <FileSelector\n            location={msaFile}\n            //@ts-ignore\n            setLocation={setMsaFile}\n            localFileAllowed\n          />\n          <Typography>Tree file or URL</Typography>\n          <FileSelector\n            location={treeFile}\n            //@ts-ignore\n            setLocation={setTreeFile}\n            localFileAllowed\n          />\n        </Grid>\n\n        <Grid item>\n          <Button\n            onClick={() => {\n              if (msaFile) {\n                model.setMSAFilehandle(msaFile)\n              }\n              if (treeFile) {\n                model.setTreeFilehandle(treeFile)\n              }\n            }}\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!msaFile && !treeFile}\n          >\n            Open\n          </Button>\n        </Grid>\n\n        <Grid item>\n          <Typography>Examples</Typography>\n          <ul>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setTreeFilehandle({\n                    uri:\n                      'https://jbrowse.org/genomes/newick_trees/sarscov2phylo.pub.ft.nh',\n                  })\n                }}\n              >\n                230k COVID-19 samples (tree only)\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setData({ msa: smallMSA, tree: smallTree })\n                }}\n              >\n                Small protein+tree\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri: 'https://ihh.github.io/abrowse/build/pfam-cov2.stock',\n                  })\n                }}\n              >\n                PFAM SARS-CoV2 multi-stockholm\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri:\n                      'https://jbrowse.org/genomes/multiple_sequence_alignments/Lysine.stock',\n                  })\n                }}\n              >\n                Lysine stockholm file\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri:\n                      'https://jbrowse.org/genomes/multiple_sequence_alignments/PF01601_full.txt',\n                  })\n                }}\n              >\n                PF01601 stockholm file (SARS-CoV2 spike protein)\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri:\n                      'https://jbrowse.org/genomes/multiple_sequence_alignments/europe_covid.fa',\n                  })\n                }}\n              >\n                Europe COVID full genomes (LR883044.1 and 199 other sequences)\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  transaction(() => {\n                    model.setMSAFilehandle({\n                      uri:\n                        'https://jbrowse.org/genomes/multiple_sequence_alignments/rhv_test-only.aligned_with_mafft_auto.fa',\n                    })\n                    model.setTreeFilehandle({\n                      uri:\n                        'https://jbrowse.org/genomes/multiple_sequence_alignments/rhv_test-only.aligned_with_mafft_auto.nh',\n                    })\n                  })\n                }}\n              >\n                MAFFT+VeryFastTree(17.9k samples)\n              </Link>\n            </li>\n          </ul>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n})\n","export const smallMSA = `CLUSTAL O(1.2.3) multiple sequence alignment\nUniProt/Swiss-Prot|P26898|IL2RA_SHEEP      MEPSLLMWRFFVFIVVPGCVTEACHDDPPSLRNA----------MFKVLRYE----VGTM\nUniProt/Swiss-Prot|P01590|IL2RA_MOUSE      MEPRLLMLGFLSLTIVPSCRAELCLYDPPEVPNA----------TFKALSYK----NGTI\nUniProt/Swiss-Prot|P41690|IL2RA_FELCA      MEPSLLLWGILTFVVVHGHVTELCDENPPDIQHA----------TFKALTYK----TGTM\nUniProt/Swiss-Prot|P01589|IL2RA_HUMAN      MDSYLLMWGLLTFIMVPGCQAELCDDDPPEIPHA----------TFKAMAYK----EGTM\nUniProt/Swiss-Prot|Q5MNY4|IL2RA_MACMU      MDPYLLMWGLLTFITVPGCQAELCDDDPPKITHA----------TFKAVAYK----EGTM\nUniProt/Swiss-Prot|Q95118|IL2RG_BOVIN      -----------------------------------LLMWGLLT-----------------\nUniProt/Swiss-Prot|P40321|IL2RG_CANFA      MLKPPLPLRSLLFLQLSLLGVGLNSTVPMPNGNEDIT------PDFFLTATPSETLSVSS\nUniProt/Swiss-Prot|P26896|IL2RB_RAT        MATVDLSWRLPLYILLLLLATT--------------------------------WVSAAV\nUniProt/Swiss-Prot|Q8BZM1|GLMN_MOUSE       PLPLRSLLFLQLPLLGVGLNP------------------PLPLRSLLFLQLPLLGVGLNP\nUniProt/Swiss-Prot|P36835|IL2_CAPHI        -----------LLGVGLNPKFLTP------------------------------------\nUniProt/Swiss-Prot|Q7JFM4|IL2_AOTVO        MLKPPLPLRSLLFLQLPLLGVGLNPKFLTPSGNEDIGGKPGTGGDFFLTSTPAGTLDVST\nUniProt/Swiss-Prot|Q29416|IL2_CANFA        --------------LFLQLSLLG-------------------------------------\n`;\n\nexport const smallTree =\n  '(((UniProt/Swiss-Prot|P26898|IL2RA_SHEEP:0.24036,(UniProt/Swiss-Prot|P41690|IL2RA_FELCA:0.17737,(UniProt/Swiss-Prot|P01589|IL2RA_HUMAN:0.03906,UniProt/Swiss-Prot|Q5MNY4|IL2RA_MACMU:0.03787):0.13033):0.04964):0.02189,UniProt/Swiss-Prot|P01590|IL2RA_MOUSE:0.23072):0.06814,(((UniProt/Swiss-Prot|Q95118|IL2RG_BOVIN:0.09600,UniProt/Swiss-Prot|P40321|IL2RG_CANFA:0.09845):0.25333,UniProt/Swiss-Prot|Q29416|IL2_CANFA:-0.35055):0.10231,(UniProt/Swiss-Prot|P26896|IL2RB_RAT:0.33631,UniProt/Swiss-Prot|Q7JFM4|IL2_AOTVO:-0.33631):0.10166):0.01607,(UniProt/Swiss-Prot|Q8BZM1|GLMN_MOUSE:0.32378,UniProt/Swiss-Prot|P36835|IL2_CAPHI:-0.32378):0.09999)';\n","import { MsaViewModel } from '../model'\nimport normalizeWheel from 'normalize-wheel'\n\nimport { observer } from 'mobx-react'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Menu, MenuItem } from '@material-ui/core'\nconst extendBounds = 5\nconst radius = 3.5\nconst d = radius * 2\n\nfunction randomColor() {\n  return [\n    Math.floor(Math.random() * 255),\n    Math.floor(Math.random() * 255),\n    Math.floor(Math.random() * 255),\n  ]\n}\n\ntype StrMap = { [key: string]: { id: string; name: string } }\ninterface TooltipData {\n  name: string\n  id: string\n  x: number\n  y: number\n}\nconst TreeBlock = observer(\n  ({ model, offsetY }: { model: MsaViewModel; offsetY: number }) => {\n    const ref = useRef<HTMLCanvasElement>(null)\n    const menuRef = useRef<HTMLDivElement>(null)\n    const clickRef = useRef<HTMLCanvasElement>(null)\n    const [colorMap, setColorMap] = useState<StrMap>({})\n    const [hovering, setHovering] = useState<TooltipData>()\n    const {\n      hierarchy,\n      rowHeight,\n      scrollY,\n      treeWidth,\n      showBranchLen,\n      collapsed,\n      margin,\n      noTree,\n      blockSize,\n      drawNodeBubbles,\n    } = model\n\n    useEffect(() => {\n      if (!ref.current || !clickRef.current) {\n        return\n      }\n      const ctx = ref.current.getContext('2d')\n      const clickCtx = clickRef.current.getContext('2d')\n      if (!ctx || !clickCtx) {\n        return\n      }\n      const colorHash: StrMap = {}\n      ;[ctx, clickCtx].forEach((context) => {\n        context.resetTransform()\n        context.clearRect(0, 0, treeWidth, blockSize)\n        context.translate(margin.left, -offsetY)\n      })\n\n      const font = ctx.font\n      ctx.font = font.replace(/\\d+px/, `${Math.max(8, rowHeight - 8)}px`)\n\n      if (!noTree) {\n        hierarchy.links().forEach(({ source, target }) => {\n          const y = showBranchLen ? 'len' : 'y'\n          //@ts-ignore\n          const { x: sy, [y]: sx } = source\n          //@ts-ignore\n          const { x: ty, [y]: tx } = target\n\n          const y1 = Math.min(sy, ty)\n          const y2 = Math.max(sy, ty)\n          //1d line intersection to check if line crosses block at all, this\n          //is an optimization that allows us to skip drawing most tree links\n          //outside the block\n          if (offsetY + blockSize >= y1 && y2 >= offsetY) {\n            ctx.beginPath()\n            ctx.moveTo(sx, sy)\n            ctx.lineTo(sx, ty)\n            ctx.lineTo(tx, ty)\n            ctx.stroke()\n          }\n        })\n\n        if (drawNodeBubbles) {\n          hierarchy.descendants().forEach((node) => {\n            const val = showBranchLen ? 'len' : 'y'\n            const {\n              //@ts-ignore\n              x: y,\n              //@ts-ignore\n              [val]: x,\n              data,\n            } = node\n            const { id = '', name = '' } = data\n\n            if (\n              y > offsetY - extendBounds &&\n              y < offsetY + blockSize + extendBounds\n            ) {\n              ctx.strokeStyle = 'black'\n              ctx.fillStyle = collapsed.includes(id) ? 'black' : 'white'\n              ctx.beginPath()\n              ctx.arc(x, y, radius, 0, 2 * Math.PI)\n              ctx.fill()\n              ctx.stroke()\n\n              const col = randomColor()\n              const [r, g, b] = col\n              colorHash[`${col}`] = { id, name }\n\n              clickCtx.fillStyle = `rgb(${r},${g},${b})`\n              clickCtx.fillRect(x - radius, y - radius, d, d)\n            }\n          })\n        }\n      }\n\n      if (rowHeight >= 10) {\n        ctx.fillStyle = 'black'\n        hierarchy.leaves().forEach((node) => {\n          const {\n            //@ts-ignore\n            x: y,\n            //@ts-ignore\n            y: x,\n            data: { name },\n            //@ts-ignore\n            len,\n          } = node\n          if (\n            y > offsetY - extendBounds &&\n            y < offsetY + blockSize + extendBounds\n          ) {\n            //note: +rowHeight/4 matches with -rowHeight/4 in msa\n            ctx.fillText(name, (showBranchLen ? len : x) + d, y + rowHeight / 4)\n          }\n        })\n      }\n      setColorMap(colorHash)\n    }, [\n      collapsed,\n      rowHeight,\n      margin.left,\n      hierarchy,\n      offsetY,\n      treeWidth,\n      showBranchLen,\n      noTree,\n      blockSize,\n      drawNodeBubbles,\n    ])\n\n    function decode(event: React.MouseEvent) {\n      const x = event.nativeEvent.offsetX\n      const y = event.nativeEvent.offsetY\n      if (!clickRef.current) {\n        return\n      }\n      const clickCtx = clickRef.current.getContext('2d')\n      if (!clickCtx) {\n        return\n      }\n      const { data } = clickCtx.getImageData(x, y, 1, 1)\n\n      const col = [data[0], data[1], data[2]]\n      return { ...colorMap[`${col}`], x, y }\n    }\n    function handleClose() {\n      setHovering(undefined)\n    }\n    return (\n      <>\n        <div\n          ref={menuRef}\n          style={{\n            position: 'absolute',\n            left: hovering?.x || 0,\n            top: scrollY + offsetY + (hovering?.y || 0),\n          }}\n        />\n        {hovering && hovering.id ? (\n          <Menu\n            anchorEl={menuRef.current}\n            transitionDuration={0}\n            keepMounted\n            open={Boolean(menuRef.current)}\n            onClose={handleClose}\n          >\n            <MenuItem\n              dense\n              onClick={() => {\n                model.toggleCollapsed(hovering.id)\n                handleClose()\n              }}\n            >\n              {model.collapsed.includes(hovering.id) ? 'Expand' : 'Collapse'}\n            </MenuItem>\n          </Menu>\n        ) : null}\n        <canvas\n          width={treeWidth}\n          height={blockSize}\n          style={{\n            width: treeWidth,\n            height: blockSize,\n            top: scrollY + offsetY,\n            left: 0,\n            position: 'absolute',\n          }}\n          onMouseMove={(event) => {\n            if (!ref.current) {\n              return\n            }\n            const data = decode(event)\n            if (data) {\n              if (data.id) {\n                ref.current.style.cursor = 'pointer'\n              } else {\n                ref.current.style.cursor = 'default'\n              }\n            }\n          }}\n          onClick={(event) => {\n            const data = decode(event)\n            if (data && data.id) {\n              setHovering(data)\n            }\n          }}\n          ref={ref}\n        />\n        <canvas\n          style={{ display: 'none' }}\n          width={treeWidth}\n          height={blockSize}\n          ref={clickRef}\n        />\n      </>\n    )\n  },\n)\nconst TreeCanvas = observer(({ model }: { model: MsaViewModel }) => {\n  const ref = useRef<HTMLDivElement>(null)\n  const scheduled = useRef(false)\n  const deltaY = useRef(0)\n  const { treeWidth, height, blocksY } = model\n\n  useEffect(() => {\n    const curr = ref.current\n    if (!curr) {\n      return\n    }\n    function onWheel(origEvent: WheelEvent) {\n      const event = normalizeWheel(origEvent)\n      deltaY.current += event.pixelY\n\n      if (!scheduled.current) {\n        scheduled.current = true\n        requestAnimationFrame(() => {\n          model.doScrollY(-deltaY.current)\n          deltaY.current = 0\n          scheduled.current = false\n        })\n      }\n      origEvent.preventDefault()\n    }\n    curr.addEventListener('wheel', onWheel)\n    return () => {\n      curr.removeEventListener('wheel', onWheel)\n    }\n  }, [model])\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        height,\n        position: 'relative',\n        overflow: 'hidden',\n        width: treeWidth,\n      }}\n    >\n      {blocksY.map((block) => (\n        <TreeBlock key={block} model={model} offsetY={block} />\n      ))}\n    </div>\n  )\n})\n\nexport default TreeCanvas\n","import normalizeWheel from 'normalize-wheel'\nimport Color from 'color'\nimport colorSchemes from '../colorSchemes'\nimport { transform } from '../util'\nimport { MsaViewModel } from '../model'\n\nimport React, { useEffect, useRef, useMemo } from 'react'\nimport { observer } from 'mobx-react'\nimport { Typography, CircularProgress } from '@material-ui/core'\nimport { useTheme } from '@material-ui/core/styles'\n\nconst MSABlock = observer(\n  ({\n    model,\n    offsetX,\n    offsetY,\n  }: {\n    model: MsaViewModel\n    offsetX: number\n    offsetY: number\n  }) => {\n    const {\n      MSA,\n      colWidth,\n      bgColor,\n      columns,\n      rowHeight,\n      scrollY,\n      scrollX,\n      hierarchy,\n      colorSchemeName,\n      blockSize,\n    } = model\n    const theme = useTheme()\n\n    const colorScheme = colorSchemes[colorSchemeName]\n    const colorContrast = useMemo(\n      () =>\n        transform(colorScheme, ([letter, color]) => [\n          letter,\n          theme.palette.getContrastText(Color(color).hex()),\n        ]),\n      [colorScheme],\n    )\n    const ref = useRef<HTMLCanvasElement>(null)\n    useEffect(() => {\n      if (!ref.current) {\n        return\n      }\n\n      const ctx = ref.current.getContext('2d')\n      if (!ctx) {\n        return\n      }\n\n      ctx.resetTransform()\n      ctx.clearRect(0, 0, blockSize, blockSize)\n      ctx.translate(-offsetX, rowHeight / 2 - offsetY)\n      ctx.textAlign = 'center'\n      ctx.font = ctx.font.replace(/\\d+px/, `${Math.max(8, rowHeight - 12)}px`)\n\n      const leaves = hierarchy.leaves()\n      const b = blockSize\n\n      // slice vertical rows, e.g. tree leaves, avoid negative slice\n      const yStart = Math.max(0, Math.floor((offsetY - rowHeight) / rowHeight))\n      const yEnd = Math.max(0, Math.ceil((offsetY + b + rowHeight) / rowHeight))\n\n      // slice horizontal visible letters, avoid negative slice\n      const xStart = Math.max(0, Math.floor(offsetX / colWidth))\n      const xEnd = Math.max(0, Math.ceil((offsetX + b) / colWidth))\n      const visibleLeaves = leaves.slice(yStart, yEnd)\n      visibleLeaves.forEach((node) => {\n        const {\n          //@ts-ignore\n          x: y,\n          //@ts-ignore\n          data: { name },\n        } = node\n\n        const str = columns[name]?.slice(xStart, xEnd)\n        for (let i = 0; i < str?.length; i++) {\n          const letter = str[i]\n          const color = colorScheme[letter.toUpperCase()]\n          if (bgColor) {\n            const x = i * colWidth + offsetX - (offsetX % colWidth)\n            ctx.fillStyle = color || 'white'\n            ctx.fillRect(x, y - rowHeight, colWidth, rowHeight)\n          }\n        }\n      })\n\n      if (rowHeight >= 10 && colWidth >= rowHeight / 2) {\n        visibleLeaves.forEach((node) => {\n          const {\n            //@ts-ignore\n            x: y,\n            //@ts-ignore\n            data: { name },\n          } = node\n\n          const str = columns[name]?.slice(xStart, xEnd)\n          for (let i = 0; i < str?.length; i++) {\n            const letter = str[i]\n            const color = colorScheme[letter.toUpperCase()]\n            const contrast = colorContrast[letter.toUpperCase()] || 'black'\n            const x = i * colWidth + offsetX - (offsetX % colWidth)\n\n            //note: -rowHeight/4 matches +rowHeight/4 in tree\n            ctx.fillStyle = bgColor ? contrast : color || 'black'\n            ctx.fillText(\n              letter,\n              Math.floor(x + colWidth / 2),\n              Math.floor(y - rowHeight / 4),\n            )\n          }\n        })\n      }\n    }, [\n      MSA,\n      columns,\n      colorScheme,\n      colorContrast,\n      bgColor,\n      rowHeight,\n      colWidth,\n      hierarchy,\n      offsetX,\n      offsetY,\n      blockSize,\n    ])\n\n    return (\n      <canvas\n        ref={ref}\n        width={blockSize}\n        height={blockSize}\n        style={{\n          position: 'absolute',\n          top: scrollY + offsetY,\n          left: scrollX + offsetX,\n          width: blockSize,\n          height: blockSize,\n        }}\n      />\n    )\n  },\n)\n\nconst MSACanvas = observer(({ model }: { model: MsaViewModel }) => {\n  const {\n    MSA,\n    msaFilehandle,\n    width,\n    height,\n    treeWidth,\n    blocksX,\n    blocksY,\n  } = model\n  const ref = useRef<HTMLDivElement>(null)\n  const scheduled = useRef(false)\n  const deltaX = useRef(0)\n  const deltaY = useRef(0)\n  useEffect(() => {\n    const curr = ref.current\n    if (!curr) {\n      return\n    }\n    function onWheel(origEvent: WheelEvent) {\n      const event = normalizeWheel(origEvent)\n      deltaX.current += event.pixelX\n      deltaY.current += event.pixelY\n\n      if (!scheduled.current) {\n        scheduled.current = true\n        requestAnimationFrame(() => {\n          model.doScrollX(-deltaX.current)\n          model.doScrollY(-deltaY.current)\n          deltaX.current = 0\n          deltaY.current = 0\n          scheduled.current = false\n        })\n      }\n      origEvent.preventDefault()\n    }\n    curr.addEventListener('wheel', onWheel)\n    return () => {\n      curr.removeEventListener('wheel', onWheel)\n    }\n  }, [model])\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        position: 'relative',\n        height,\n        width: width - treeWidth,\n        overflow: 'hidden',\n      }}\n    >\n      {!MSA && !msaFilehandle ? null : !MSA ? (\n        <div style={{ position: 'absolute', left: '50%', top: '50%' }}>\n          <CircularProgress />\n          <Typography>Loading...</Typography>\n        </div>\n      ) : (\n        <>\n          {blocksY\n            .map((blockY) =>\n              blocksX.map((blockX) => {\n                return (\n                  <MSABlock\n                    key={`${blockX}_${blockY}`}\n                    model={model}\n                    offsetX={blockX}\n                    offsetY={blockY}\n                  />\n                )\n              }),\n            )\n            .flat()}\n        </>\n      )}\n    </div>\n  )\n})\n\nexport default MSACanvas\n","import React, { useState } from 'react';\nimport { IconButton, Select } from '@material-ui/core';\nimport { MsaViewModel } from '../model';\nimport { observer } from 'mobx-react';\n\nimport SettingsDialog from './SettingsDlg';\nimport AboutDialog from './AboutDlg';\nimport DetailsDialog from './DetailsDlg';\n\n//icons\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\n\nconst Header = observer(({ model }: { model: MsaViewModel }) => {\n  const [settingsDialogVisible, setSettingsDialogVisible] = useState(false);\n  const [aboutDialogVisible, setAboutDialogVisible] = useState(false);\n  const [detailsDialogVisible, setDetailsDialogVisible] = useState(false);\n  const { currentAlignment, alignmentNames } = model;\n\n  return (\n    <div style={{ display: 'block' }}>\n      <IconButton\n        onClick={() => {\n          model.setData({ tree: '', msa: '' });\n          model.setTreeFilehandle(undefined);\n          model.setMSAFilehandle(undefined);\n          model.setScrollY(0);\n          model.setScrollX(0);\n          model.setCurrentAlignment(0);\n        }}\n      >\n        <FolderOpenIcon />\n      </IconButton>\n      <IconButton\n        onClick={() => {\n          setSettingsDialogVisible(true);\n        }}\n      >\n        <SettingsIcon />\n      </IconButton>\n\n      <IconButton\n        onClick={() => {\n          setAboutDialogVisible(true);\n        }}\n      >\n        <InfoIcon />\n      </IconButton>\n\n      <IconButton\n        onClick={() => {\n          setDetailsDialogVisible(true);\n        }}\n      >\n        <AssignmentIcon />\n      </IconButton>\n      <SettingsDialog\n        open={settingsDialogVisible}\n        model={model}\n        onClose={() => setSettingsDialogVisible(false)}\n      />\n      <AboutDialog\n        open={aboutDialogVisible}\n        onClose={() => setAboutDialogVisible(false)}\n      />\n\n      <DetailsDialog\n        open={detailsDialogVisible}\n        model={model}\n        onClose={() => setDetailsDialogVisible(false)}\n      />\n      {alignmentNames.length > 0 ? (\n        <Select\n          native\n          value={currentAlignment}\n          onChange={event => {\n            //@ts-ignore\n            model.setCurrentAlignment(+event.target.value);\n            model.setScrollX(0);\n            model.setScrollY(0);\n          }}\n        >\n          {alignmentNames.map((option, index) => (\n            <option key={option + '-' + index} value={index}>\n              {option}\n            </option>\n          ))}\n        </Select>\n      ) : null}\n    </div>\n  );\n});\n\nexport default Header;\n","import { MsaViewModel } from \"../model\";\nimport colorSchemes from \"../colorSchemes\";\n\nimport React, { useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\n\nexport default observer(\n  ({\n    model,\n    onClose,\n    open,\n  }: {\n    model: MsaViewModel;\n    onClose: () => void;\n    open: boolean;\n  }) => {\n    const {\n      rowHeight: rowHeightInit,\n      colWidth: colWidthInit,\n      nameWidth: nameWidthInit,\n      treeWidth: treeWidthInit,\n      colorSchemeName,\n      noTree,\n    } = model;\n    const [rowHeight, setRowHeight] = useState(\"\" + rowHeightInit);\n    const [colWidth, setColWidth] = useState(\"\" + colWidthInit);\n    const [nameWidth, setNameWidth] = useState(\"\" + nameWidthInit);\n    const [treeWidth, setTreeWidth] = useState(\"\" + treeWidthInit);\n\n    function error(n: string) {\n      return Number.isNaN(+n) || +n < 0;\n    }\n    const rowHeightError = error(rowHeight);\n    const colWidthError = error(colWidth);\n    const nameWidthError = error(nameWidth);\n    const treeWidthError = error(treeWidth);\n\n    return (\n      <Dialog onClose={() => onClose()} open={open}>\n        <DialogTitle>Settings</DialogTitle>\n        <DialogContent>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.showBranchLen}\n                onChange={() => model.toggleBranchLen()}\n              />\n            }\n            label=\"Show branch length\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.bgColor}\n                onChange={() => model.toggleBgColor()}\n              />\n            }\n            label=\"Color background\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.drawNodeBubbles}\n                onChange={() => model.toggleNodeBubbles()}\n              />\n            }\n            label=\"Draw node bubbles\"\n          />\n          <br />\n          <TextField\n            label=\"Row height (px)\"\n            value={rowHeight}\n            error={rowHeightError}\n            onChange={(event) => setRowHeight(event.target.value)}\n          />\n          <TextField\n            label=\"Column width (px)\"\n            value={colWidth}\n            error={colWidthError}\n            onChange={(event) => setColWidth(event.target.value)}\n          />\n          <br />\n          {!noTree ? (\n            <TextField\n              label=\"Tree width (px)\"\n              value={treeWidth}\n              error={treeWidthError}\n              onChange={(event) => setTreeWidth(event.target.value)}\n            />\n          ) : null}\n          <TextField\n            label=\"Name width (px)\"\n            value={nameWidth}\n            error={nameWidthError}\n            onChange={(event) => setNameWidth(event.target.value)}\n          />\n          <br />\n\n          <TextField\n            select\n            label=\"Color scheme\"\n            value={colorSchemeName}\n            onChange={(event) => model.setColorSchemeName(event.target.value)}\n          >\n            {Object.keys(colorSchemes).map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </TextField>\n          <br />\n          <br />\n          <br />\n          <Button\n            disabled={\n              rowHeightError ||\n              colWidthError ||\n              nameWidthError ||\n              treeWidthError\n            }\n            onClick={() => {\n              model.setRowHeight(+rowHeight);\n              model.setColWidth(+colWidth);\n              model.setNameWidth(+nameWidth);\n              if (!noTree) {\n                model.setTreeWidth(+treeWidth);\n              }\n              onClose();\n            }}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Submit\n          </Button>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n);\n","import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Typography,\n  Link,\n} from \"@material-ui/core\";\n\nfunction LicenseDialog({\n  onClose,\n  open,\n}: {\n  onClose: () => void;\n  open: boolean;\n}) {\n  return (\n    <Dialog onClose={() => onClose()} open={open}>\n      <DialogTitle>Settings</DialogTitle>\n      <DialogContent>\n        <pre style={{ height: 100, overflow: \"auto\" }}>\n          {`\nCopyright 2017 - 2020, The Biotite contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        `}\n        </pre>\n      </DialogContent>\n    </Dialog>\n  );\n}\nexport default function AboutDialog({\n  onClose,\n  open,\n}: {\n  onClose: () => void;\n  open: boolean;\n}) {\n  const [dlgOpen, setDlgOpen] = useState(false);\n  return (\n    <>\n      <LicenseDialog onClose={() => setDlgOpen(false)} open={dlgOpen} />\n      <Dialog onClose={() => onClose()} open={open}>\n        <DialogTitle>About this plugin</DialogTitle>\n        <DialogContent>\n          <Typography>\n            JBrowse 2 MSAView plugin v1.0.0 (\n            <Link href=\"https://github.com/gmod/jbrowse-plugin-msaview\">\n              Github\n            </Link>\n            )\n          </Typography>\n\n          <ul>\n            <li>\n              We use some color schemes from the{\" \"}\n              <Link href=\"https://github.com/biotite-dev/biotite\">biotite</Link>{\" \"}\n              project, and their license is reproduced{\" \"}\n              <Link onClick={() => setDlgOpen(true)}>here</Link>\n            </li>\n            <li>\n              See this page for some information on jalview colorings{\" \"}\n              <Link href=\"https://www.jalview.org/help/html/colourSchemes/\">\n                here\n              </Link>\n            </li>\n            <li>\n              See this page for some info on the clustal, cinema, maeditor, and\n              lesk color schemes{\" \"}\n              <Link href=\"http://www.bioinformatics.nl/~berndb/aacolour.html\">\n                here\n              </Link>\n            </li>\n            <li>\n              See this paper about the flower color scheme{\" \"}\n              <Link href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7245768/\">\n                here\n              </Link>\n            </li>\n          </ul>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","import { MsaViewModel } from \"../model\";\n\nimport React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Dialog, DialogTitle, DialogContent } from \"@material-ui/core\";\nimport { Attributes } from \"@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail\";\n\nexport default observer(\n  ({\n    model,\n    onClose,\n    open,\n  }: {\n    model: MsaViewModel;\n    onClose: () => void;\n    open: boolean;\n  }) => {\n    const { alignmentDetails } = model;\n\n    return (\n      <Dialog onClose={() => onClose()} open={open}>\n        <DialogTitle>Metadata</DialogTitle>\n        <DialogContent>\n          <Attributes attributes={alignmentDetails} />\n        </DialogContent>\n      </Dialog>\n    );\n  }\n);\n","import BaseViewModel from '@jbrowse/core/pluggableElementTypes/models/BaseViewModel'\nimport * as Clustal from 'clustal-js'\nimport { hierarchy, cluster, HierarchyNode } from 'd3-hierarchy'\nimport { ascending, max } from 'd3-array'\nimport parseNewick from './parseNewick'\nimport Stockholm from 'stockholm-js'\nimport { Instance, cast, types, addDisposer } from 'mobx-state-tree'\nimport { FileLocation, ElementId } from '@jbrowse/core/util/types/mst'\nimport { FileLocation as FileLocationType } from '@jbrowse/core/util/types'\n\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { autorun } from 'mobx'\n\nclass ClustalMSA {\n  private MSA: {\n    header: Record<string, any>\n    alns: { id: string; seq: string }[]\n  }\n\n  constructor(text: string) {\n    this.MSA = Clustal.parse(text)\n  }\n\n  getMSA() {\n    return this.MSA\n  }\n\n  getRow(name: string) {\n    return this.MSA.alns.find((aln) => aln.id === name)?.seq.split('')\n  }\n\n  getWidth() {\n    return this.MSA.alns[0].seq.length\n  }\n\n  getDetails() {\n    return this.MSA.header\n  }\n\n  get alignmentNames() {\n    return []\n  }\n\n  getTree() {\n    return {\n      id: 'root',\n      noTree: true,\n      branchset: this.MSA.alns,\n    }\n  }\n}\n\ntype StrMap = { [key: string]: string }\nclass FastaMSA {\n  private MSA: { seqdata: { [key: string]: string } }\n  constructor(text: string) {\n    const seq: StrMap = {}\n    let name = ''\n    const re = /^>(\\S+)/\n    text.split('\\n').forEach((line) => {\n      const match = re.exec(line)\n      if (match) {\n        seq[(name = match[1])] = ''\n      } else if (name) {\n        seq[name] = seq[name] + line.replace(/[ \\t]/g, '')\n      }\n    })\n    this.MSA = { seqdata: seq }\n  }\n\n  getMSA() {\n    return this.MSA\n  }\n\n  getRow(name: string) {\n    return this.MSA?.seqdata[name]?.split('')\n  }\n\n  getWidth() {\n    const name = Object.keys(this.MSA?.seqdata)[0]\n    return this.getRow(name).length\n  }\n\n  get alignmentNames() {\n    return []\n  }\n\n  getDetails() {\n    return {}\n  }\n\n  getTree() {\n    return {\n      id: 'root',\n      noTree: true,\n      branchset: Object.keys(this.MSA.seqdata).map((name) => ({\n        id: name,\n      })),\n    }\n  }\n}\ntype StockholmEntry = {\n  gf: {\n    DE?: string[]\n    NH?: string[]\n  }\n  seqdata: { [key: string]: string }\n}\n\nclass StockholmMSA {\n  private data: StockholmEntry[]\n  private MSA: StockholmEntry\n\n  constructor(text: string, currentAlignment: number) {\n    const res = Stockholm.parseAll(text)\n    this.data = res\n    this.MSA = res[currentAlignment]\n  }\n\n  getMSA() {\n    return this.MSA\n  }\n\n  getRow(name: string) {\n    return this.MSA?.seqdata[name]?.split('')\n  }\n\n  getWidth() {\n    const name = Object.keys(this.MSA?.seqdata)[0]\n    return this.getRow(name).length\n  }\n\n  get alignmentNames() {\n    return this.data.map(\n      (aln, index) => aln.gf.DE?.[0] || `Alignment ${index + 1}`,\n    )\n  }\n\n  getDetails() {\n    return this.MSA.gf\n  }\n\n  getTree() {\n    const tree = this.MSA?.gf?.NH?.[0]\n    return tree\n      ? generateNodeIds(parseNewick(tree))\n      : {\n          id: 'root',\n          noTree: true,\n          branchset: Object.keys(this.MSA.seqdata).map((name) => ({\n            id: name,\n          })),\n        }\n  }\n}\n\nfunction setBrLength(d: HierarchyNode<any>, y0: number, k: number) {\n  //@ts-ignore\n  d.len = (y0 += Math.max(d.data.length || 0, 0)) * k\n  if (d.children) {\n    d.children.forEach((d) => {\n      setBrLength(d, y0, k)\n    })\n  }\n}\n\nfunction maxLength(d: HierarchyNode<any>): number {\n  return (d.data.length || 1) + (d.children ? max(d.children, maxLength) : 0)\n}\n\n// note: we don't use this.root because it won't update in response to changes\n// in realWidth/totalHeight here otherwise, needs to generate a new object\nfunction getRoot(tree: any) {\n  return hierarchy(tree, (d) => d.branchset)\n    .sum((d) => (d.branchset ? 0 : 1))\n    .sort((a, b) => {\n      return ascending(a.data.length || 1, b.data.length || 1)\n    })\n}\n\ntype Node = { branchset?: Node[] }\ntype NodeWithIds = { id: string; branchset?: NodeWithIds[]; noTree?: boolean }\n\nfunction generateNodeIds(tree: Node, parent = 'node', depth = 0): NodeWithIds {\n  const id = `${parent}-${depth}`\n\n  return {\n    ...tree,\n    id,\n    branchset: tree.branchset?.map((b, i) =>\n      generateNodeIds(b, id + '-' + i, depth + 1),\n    ),\n  }\n}\nfunction filter(tree: NodeWithIds, collapsed: string[]): NodeWithIds {\n  const { branchset, ...rest } = tree\n  if (collapsed.includes(tree.id)) {\n    return rest\n  } else if (branchset) {\n    return {\n      ...rest,\n      branchset: branchset.map((b) => filter(b, collapsed)),\n    }\n  } else {\n    return tree\n  }\n}\n\nfunction clamp(min: number, num: number, max: number) {\n  return Math.min(Math.max(num, min), max)\n}\n\nconst model = types.snapshotProcessor(\n  types\n    .compose(\n      BaseViewModel,\n      types\n        .model('MsaView', {\n          id: ElementId,\n          type: types.literal('MsaView'),\n          height: 680,\n          treeAreaWidth: 600,\n          nameWidth: 200,\n          rowHeight: 20,\n          scrollY: 0,\n          scrollX: 0,\n          blockSize: 1000,\n          colWidth: 16,\n          showBranchLen: true,\n          bgColor: true,\n          drawNodeBubbles: true,\n          colorSchemeName: 'maeditor',\n          treeFilehandle: types.maybe(FileLocation),\n          msaFilehandle: types.maybe(FileLocation),\n          currentAlignment: 0,\n          collapsed: types.array(types.string),\n          data: types.optional(\n            types\n              .model({\n                tree: types.maybe(types.string),\n                msa: types.maybe(types.string),\n              })\n              .actions((self) => ({\n                setTree(tree?: string) {\n                  self.tree = tree\n                },\n                setMSA(msa?: string) {\n                  self.msa = msa\n                },\n              })),\n            { tree: '', msa: '' },\n          ),\n        })\n        .volatile(() => ({\n          error: undefined as Error | undefined,\n          volatileWidth: 0,\n          margin: { left: 20, top: 20 },\n        }))\n        .actions((self) => ({\n          setError(error?: Error) {\n            self.error = error\n          },\n          setRowHeight(n: number) {\n            self.rowHeight = n\n          },\n          setColWidth(n: number) {\n            self.colWidth = n\n          },\n          setColorSchemeName(name: string) {\n            self.colorSchemeName = name\n          },\n          setScrollY(n: number) {\n            self.scrollY = n\n          },\n          setScrollX(n: number) {\n            self.scrollX = n\n          },\n          setTreeWidth(n: number) {\n            self.treeAreaWidth = n\n          },\n          setNameWidth(n: number) {\n            self.nameWidth = n\n          },\n          setCurrentAlignment(n: number) {\n            self.currentAlignment = n\n          },\n          toggleCollapsed(node: string) {\n            if (self.collapsed.includes(node)) {\n              self.collapsed.remove(node)\n            } else {\n              self.collapsed.push(node)\n            }\n          },\n          toggleBranchLen() {\n            self.showBranchLen = !self.showBranchLen\n          },\n          toggleBgColor() {\n            self.bgColor = !self.bgColor\n          },\n          toggleNodeBubbles() {\n            self.drawNodeBubbles = !self.drawNodeBubbles\n          },\n          setData(data: { msa: string; tree: string }) {\n            self.data = cast(data)\n          },\n          setWidth(width: number) {\n            self.volatileWidth = width\n          },\n          async setMSAFilehandle(msaFilehandle?: FileLocationType) {\n            if (msaFilehandle && 'blobId' in msaFilehandle) {\n              this.setMSA(\n                (await openLocation(msaFilehandle).readFile('utf8')) as string,\n              )\n            } else {\n              self.msaFilehandle = msaFilehandle\n            }\n          },\n          async setTreeFilehandle(treeFilehandle?: FileLocationType) {\n            if (treeFilehandle && 'blobId' in treeFilehandle) {\n              this.setTree(\n                (await openLocation(treeFilehandle).readFile('utf8')) as string,\n              )\n            } else {\n              self.treeFilehandle = treeFilehandle\n            }\n          },\n          setMSA(result: string) {\n            self.data.setMSA(result)\n          },\n          setTree(result: string) {\n            self.data.setTree(result)\n          },\n\n          afterCreate() {\n            addDisposer(\n              self,\n              autorun(async () => {\n                const { treeFilehandle } = self\n                if (treeFilehandle) {\n                  this.setTree(\n                    (await openLocation(treeFilehandle).readFile(\n                      'utf8',\n                    )) as string,\n                  )\n                }\n              }),\n            )\n            addDisposer(\n              self,\n              autorun(async () => {\n                const { msaFilehandle } = self\n\n                if (msaFilehandle) {\n                  this.setMSA(\n                    (await openLocation(msaFilehandle).readFile(\n                      'utf8',\n                    )) as string,\n                  )\n                }\n              }),\n            )\n          },\n        }))\n        .views((self) => {\n          let oldBlocksX: number[] = []\n          let oldBlocksY: number[] = []\n          let oldValX = 0\n          let oldValY = 0\n          return {\n            get initialized() {\n              return (\n                self.data.msa ||\n                self.data.tree ||\n                self.msaFilehandle ||\n                self.treeFilehandle\n              )\n            },\n\n            get blocksX() {\n              const { scrollX, blockSize: size, colWidth } = self\n              const ret = -(size * Math.floor(scrollX / size)) - size\n\n              const b = []\n              for (let i = ret; i < ret + size * 3; i += size) {\n                if (i + size > 0) {\n                  b.push(i)\n                }\n              }\n              if (\n                JSON.stringify(b) !== JSON.stringify(oldBlocksX) ||\n                colWidth !== oldValX\n              ) {\n                oldBlocksX = b\n                oldValX = colWidth\n              }\n              return oldBlocksX\n            },\n\n            get blocksY() {\n              const { scrollY, blockSize: size, rowHeight } = self\n              const ret = -(size * Math.floor(scrollY / size)) - 2 * size\n\n              const b = []\n              for (let i = ret; i < ret + size * 3; i += size) {\n                if (i + size > 0) {\n                  b.push(i)\n                }\n              }\n              if (\n                JSON.stringify(b) !== JSON.stringify(oldBlocksY) ||\n                rowHeight !== oldValY\n              ) {\n                oldBlocksY = b\n                oldValY = rowHeight\n              }\n              return oldBlocksY\n            },\n\n            get done() {\n              return (\n                self.volatileWidth > 0 &&\n                this.initialized &&\n                (self.data.msa || self.data.tree)\n              )\n            },\n\n            get alignmentDetails() {\n              return this.MSA?.getDetails() || {}\n            },\n\n            get currentAlignmentName() {\n              return this.alignmentNames[self.currentAlignment]\n            },\n\n            get alignmentNames() {\n              return this.MSA?.alignmentNames || []\n            },\n\n            get noTree() {\n              return !!this.tree.noTree\n            },\n\n            get menuItems() {\n              return []\n            },\n\n            get MSA() {\n              const text = self.data.msa\n              if (text) {\n                if (Stockholm.sniff(text)) {\n                  return new StockholmMSA(text, self.currentAlignment)\n                } else if (text.startsWith('>')) {\n                  return new FastaMSA(text)\n                } else {\n                  return new ClustalMSA(text)\n                }\n              }\n              return null\n            },\n            get width() {\n              return self.volatileWidth\n            },\n\n            get msaWidth() {\n              return (\n                ((this.MSA?.getWidth() || 0) - this.blanks.length) *\n                self.colWidth\n              )\n            },\n\n            get tree() {\n              const {\n                data: { tree },\n                collapsed,\n              } = self\n              const t = tree\n                ? generateNodeIds(parseNewick(tree))\n                : this.MSA?.getTree()\n\n              return t ? filter(t, collapsed) : { noTree: true }\n            },\n\n            get root() {\n              return getRoot(this.tree)\n            },\n\n            get treeWidthMinusNames() {\n              return self.treeAreaWidth - self.nameWidth\n            },\n\n            get treeWidth() {\n              return this.noTree ? self.nameWidth : self.treeAreaWidth\n            },\n\n            get blanks() {\n              const nodes = this.hierarchy.leaves()\n              const blanks = []\n\n              // filter type guard\n              // https://www.benmvp.com/blog/filtering-undefined-elements-from-array-typescript/\n              const strs = nodes\n                .map(({ data }) => this.MSA?.getRow(data.name))\n                .filter((item): item is string[] => !!item)\n\n              for (let i = 0; i < strs[0].length; i++) {\n                let counter = 0\n                for (let j = 0; j < strs.length; j++) {\n                  if (strs[j][i] === '-') {\n                    counter++\n                  }\n                }\n                if (counter === strs.length) {\n                  blanks.push(i)\n                }\n              }\n              return blanks\n            },\n\n            get columns(): Record<string, string> {\n              const nodes = this.hierarchy.leaves()\n              const rows = nodes\n                .map(({ data }) => [data.name, this.MSA?.getRow(data.name)])\n                .filter((f) => !!f[1])\n              const strs = rows.map((row) => row[1])\n\n              const ret: string[] = []\n              for (let i = 0; i < strs.length; i++) {\n                let s = ''\n                let b = 0\n                for (let j = 0; j < strs[i].length; j++) {\n                  if (j === this.blanks[b]) {\n                    b++\n                  } else {\n                    s += strs[i][j]\n                  }\n                }\n                ret.push(s)\n              }\n              return Object.fromEntries(\n                rows.map((row, index) => [row[0], ret[index]]),\n              )\n            },\n\n            // generates a new tree that is clustered with x,y positions\n            get hierarchy() {\n              const root = getRoot(this.tree)\n              const clust = cluster()\n                .size([this.totalHeight, this.treeWidthMinusNames])\n                .separation(() => 1)\n              clust(root)\n              setBrLength(\n                root,\n                (root.data.length = 0),\n                this.treeWidthMinusNames / maxLength(root),\n              )\n              return root\n            },\n\n            get totalHeight() {\n              return this.root.leaves().length * self.rowHeight\n            },\n          }\n        }),\n    )\n    .actions((self) => ({\n      doScrollY(deltaY: number) {\n        self.scrollY = clamp(-self.totalHeight + 10, self.scrollY + deltaY, 10)\n      },\n\n      doScrollX(deltaX: number) {\n        self.scrollX = clamp(\n          -self.msaWidth + (self.width - self.treeWidth - 20),\n          self.scrollX + deltaX,\n          0,\n        )\n      },\n    })),\n  {\n    postProcessor(result) {\n      const { data, ...rest } = result\n      return rest\n    },\n  },\n)\n\nexport default model\n\nexport type MsaViewStateModel = typeof model\nexport type MsaViewModel = Instance<MsaViewStateModel>\n","/**\n * Newick format parser in JavaScript.\n *\n * Copyright (c) Jason Davies 2010.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * Example tree (from http://en.wikipedia.org/wiki/Newick_format):\n *\n * +--0.1--A\n * F-----0.2-----B            +-------0.3----C\n * +------------------0.5-----E\n *                            +---------0.4------D\n *\n * Newick format:\n * (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\n *\n * Converted to JSON:\n * {\n *   name: \"F\",\n *   branchset: [\n *     {name: \"A\", length: 0.1},\n *     {name: \"B\", length: 0.2},\n *     {\n *       name: \"E\",\n *       length: 0.5,\n *       branchset: [\n *         {name: \"C\", length: 0.3},\n *         {name: \"D\", length: 0.4}\n *       ]\n *     }\n *   ]\n * }\n *\n * Converted to JSON, but with no names or lengths:\n * {\n *   branchset: [\n *     {}, {}, {\n *       branchset: [{}, {}]\n *     }\n *   ]\n * }\n */\nexport default function parse(s) {\n  const ancestors = []\n  let tree = {}\n  const tokens = s.split(/\\s*(;|\\(|\\)|,|:)\\s*/)\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n    const subtree = {}\n    switch (token) {\n      case '(': // new branchset\n        tree.branchset = [subtree]\n        ancestors.push(tree)\n        tree = subtree\n        break\n      case ',': // another branch\n        ancestors[ancestors.length - 1].branchset.push(subtree)\n        tree = subtree\n        break\n      case ')': // optional name next\n        tree = ancestors.pop()\n        break\n      case ':': // optional length next\n        break\n      default: {\n        const x = tokens[i - 1]\n        if (x === ')' || x === '(' || x === ',') {\n          tree.name = token\n        } else if (x === ':') {\n          tree.length = parseFloat(token)\n        }\n      }\n    }\n  }\n  return tree\n}\n","import { observer } from \"mobx-react\";\nimport { MSAView, MSAModel } from \"react-msaview\";\nimport { createJBrowseTheme } from \"@jbrowse/core/ui/theme\";\n\nimport { ThemeProvider } from \"@material-ui/core/styles\";\n\nfunction App() {\n  const theme = createJBrowseTheme();\n  const model = MSAModel.create({ id: `${Math.random()}`, type: \"MsaView\" });\n  model.setWidth(1800);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ border: \"1px solid black\", margin: 20 }}>\n        <MSAView model={model} />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}