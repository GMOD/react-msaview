{"version":3,"sources":["../../src/util.ts","../../src/index.ts","../../src/colorSchemes.ts","../../src/parseNewick.js","../../../src/components/MSAView.tsx","../../../src/components/ImportForm.tsx","../../../components/data/seq2.js","../../../src/components/TreeCanvas.tsx","../../../src/components/MSACanvas.tsx","../../../src/components/Ruler.tsx","../../../src/components/TreeRuler.tsx","../../../src/components/Header.tsx","../../../src/components/SettingsDlg.tsx","../../../src/components/AboutDlg.tsx","../../../src/components/DetailsDlg.tsx","../../src/model.ts","../../../src/parsers/ClustalMSA.ts","../../../src/parsers/StockholmMSA.ts","../../../src/parsers/FastaMSA.ts","App.js","reportWebVitals.js","index.js"],"names":["Object","generateNodeIds","parent","depth","id","branchset","tree","b","transform","clustal","G","P","S","T","H","K","R","F","W","Y","I","L","M","V","lesk","A","C","N","Q","D","E","maeditor","flower","rainbow_dna","U","clustalx_protein","clustalx_dna","jalview_buried","B","X","Z","jalview_hydrophobicity","jalview_prophelix","jalview_propstrand","jalview_propturn","jalview_taylor","jalview_zappo","cinema","key","val","letter","color","s","ancestors","tokens","i","token","subtree","x","parseFloat","observer","model","done","initialized","treeAreaWidth","useState","cropMouseDown","setCropMouseDown","useEffect","listener","event","listener2","document","height","style","overflow","display","width","onMouseDown","cursor","background","position","top","left","resizeHandleWidth","zIndex","variant","msaFile","setMsaFile","treeFile","setTreeFile","container","spacing","justify","alignItems","item","location","setLocation","localFileAllowed","onClick","disabled","href","uri","msa","smallMSA","smallTree","transaction","radius","padding","TreeBlock","offsetY","ref","useRef","menuRef","clickRef","colorMap","setColorMap","hovering","setHovering","hierarchy","rowHeight","scrollY","treeWidth","showBranchLen","collapsed","margin","noTree","blockSize","drawNodeBubbles","y","clickCtx","data","col","ctx","colorHash","context","font","Math","source","target","sy","sx","ty","tx","y1","y2","node","name","r","g","len","anchorEl","transitionDuration","keepMounted","open","Boolean","onClose","handleClose","dense","onMouseMove","decode","scheduled","deltaY","blocksY","curr","requestAnimationFrame","origEvent","block","MSABlock","offsetX","MSA","colWidth","bgColor","columns","scrollX","colorSchemeName","theme","colorScheme","colorSchemes","colorContrast","useMemo","leaves","yStart","yEnd","xStart","xEnd","visibleLeaves","str","contrast","mouseX","msaFilehandle","msaAreaWidth","blocksX","deltaX","by","chooseGridPitch","minMajorPitchBp","minMajorPitchPx","scale","majorMagnitude","parseInt","Number","majorPitch","majorPitchPx","minorPitch","makeTicks","emitMajor","emitMinor","gridPitch","bpPerPx","minBase","maxBase","iterPitch","index","ticks","base","type","mathPower","num","String","useStyles","makeStyles","majorTickLabel","fontSize","majorTick","stroke","minorTick","RulerBlock","start","end","reversed","major","minor","classes","tick","x1","x2","strokeWidth","className","data-bp","textAnchor","settingsDialogVisible","setSettingsDialogVisible","aboutDialogVisible","setAboutDialogVisible","detailsDialogVisible","setDetailsDialogVisible","currentAlignment","alignmentNames","native","value","onChange","option","rowHeightInit","colWidthInit","nameWidthInit","treeWidthInit","setRowHeight","setColWidth","nameWidth","setNameWidth","setTreeWidth","n","rowHeightError","error","colWidthError","nameWidthError","treeWidthError","control","checked","label","select","dlgOpen","setDlgOpen","LicenseDialog","alignmentDetails","attributes","setBrLength","d","y0","maxLength","max","getRoot","ascending","a","filter","rest","clamp","min","types","BaseViewModel","ElementId","mousePos","dragHandleType","treeFilehandle","FileLocation","setTree","self","setMSA","volatileWidth","setError","setMousePos","setColorSchemeName","setScrollY","setScrollX","setTreeAreaWidth","setCurrentAlignment","setDragHandleType","toggleCollapsed","toggleBranchLen","toggleBgColor","toggleNodeBubbles","setData","cast","setWidth","setMSAFilehandle","openLocation","setTreeFilehandle","afterCreate","addDisposer","autorun","oldBlocksX","oldBlocksY","oldValX","oldValY","size","ret","JSON","this","text","Stockholm","StockholmMSA","FastaMSA","ClustalMSA","blanks","t","strs","counter","j","rows","f","row","root","cluster","clust","length","doScrollY","doScrollX","postProcessor","result","Clustal","alns","find","aln","seq","res","getRow","map","re","match","line","seqdata","createJBrowseTheme","MSAModel","create","random","ThemeProvider","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","console","log"],"mappings":"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","file":"static/js/main.6ff55a77.chunk.js","sourcesContent":["export function transform<T>(\n  obj: Record<string, T>,\n  cb: (arg0: [string, T]) => [string, T],\n) {\n  return Object.fromEntries(Object.entries(obj).map(cb))\n}\n\nexport type Node = { branchset?: Node[] }\nexport type NodeWithIds = {\n  id: string\n  branchset?: NodeWithIds[]\n  noTree?: boolean\n}\n\nexport function generateNodeIds(\n  tree: Node,\n  parent = 'node',\n  depth = 0,\n): NodeWithIds {\n  const id = `${parent}-${depth}`\n\n  return {\n    ...tree,\n    id,\n    branchset: tree.branchset?.map((b, i) =>\n      generateNodeIds(b, id + '-' + i, depth + 1),\n    ),\n  }\n}\n","import MSAView from './components/MSAView'\nimport MSAModel from './model'\n\nexport { MSAModel, MSAView }\n","import Color from 'color'\nimport { transform } from './util'\n\nconst colorSchemes = {\n  clustal: {\n    G: 'orange',\n    P: 'orange',\n    S: 'orange',\n    T: 'orange',\n    H: 'red',\n    K: 'red',\n    R: 'red',\n    F: 'blue',\n    W: 'blue',\n    Y: 'blue',\n    I: 'green',\n    L: 'green',\n    M: 'green',\n    V: 'green',\n  },\n  lesk: {\n    G: 'orange',\n    A: 'orange',\n    S: 'orange',\n    T: 'orange',\n    C: 'green',\n    V: 'green',\n    I: 'green',\n    L: 'green',\n    P: 'green',\n    F: 'green',\n    Y: 'green',\n    M: 'green',\n    W: 'green',\n    N: 'magenta',\n    Q: 'magenta',\n    H: 'magenta',\n    D: 'red',\n    E: 'red',\n    K: 'blue',\n    R: 'blue',\n  },\n  maeditor: {\n    A: 'lightgreen',\n    G: 'lightgreen',\n    C: 'green',\n    D: 'darkgreen',\n    E: 'darkgreen',\n    N: 'darkgreen',\n    Q: 'darkgreen',\n    I: 'blue',\n    L: 'blue',\n    M: 'blue',\n    V: 'blue',\n    F: '#c8a2c8',\n    W: '#c8a2c8',\n    Y: '#c8a2c8',\n    H: 'darkblue',\n    K: 'orange',\n    R: 'orange',\n    P: 'pink',\n    S: 'red',\n    T: 'red',\n  },\n\n  //https://github.com/biotite-dev/biotite/blob/8c460972f8ab904312f130dfb80f3efc8c9bd7c5/src/biotite/sequence/graphics/color_schemes/flower.json\n  flower: {\n    A: '#b18a51',\n    C: '#ff5701',\n    D: '#01a578',\n    E: '#2da0a1',\n    F: '#fa559d',\n    G: '#b1c23c',\n    H: '#0194f9',\n    I: '#f27663',\n    K: '#7fc3d7',\n    L: '#df6e75',\n    M: '#fe9daf',\n    N: '#0bcec6',\n    P: '#4fa32a',\n    Q: '#7295ae',\n    R: '#83bff1',\n    S: '#b4bd9b',\n    T: '#d2b576',\n    V: '#fd997b',\n    W: '#ff2ded',\n    Y: '#c96ecf',\n  },\n  rainbow_dna: {\n    A: '#3737f5',\n    C: '#37f537',\n    G: '#f5f537',\n    T: '#f53737',\n    U: '#f53737',\n  },\n\n  //https://github.com/biotite-dev/biotite/blob/8c460972f8ab904312f130dfb80f3efc8c9bd7c5/src/biotite/sequence/graphics/color_schemes/clustalx_protein.json\n  clustalx_protein: {\n    A: '#197fe5',\n    C: '#e57f7f',\n    D: '#cc4ccc',\n    E: '#cc4ccc',\n    F: '#197fe5',\n    G: '#e5994c',\n    H: '#19b2b2',\n    I: '#197fe5',\n    K: '#e53319',\n    L: '#197fe5',\n    M: '#197fe5',\n    N: '#19cc19',\n    P: '#cccc00',\n    Q: '#19cc19',\n    R: '#e53319',\n    S: '#19cc19',\n    T: '#19cc19',\n    V: '#197fe5',\n    W: '#197fe5',\n    Y: '#19b2b2',\n  },\n\n  clustalx_dna: {\n    A: '#e53319',\n    C: '#197fe5',\n    G: '#e5994c',\n    T: '#19cc19',\n    U: '#19cc19',\n  },\n  jalview_buried: {\n    A: '#00a35c',\n    R: '#00fc03',\n    N: '#00eb14',\n    D: '#00eb14',\n    C: '#0000ff',\n    Q: '#00f10e',\n    E: '#00f10e',\n    G: '#009d62',\n    H: '#00d52a',\n    I: '#0054ab',\n    L: '#007b84',\n    K: '#00ff00',\n    M: '#009768',\n    F: '#008778',\n    P: '#00e01f',\n    S: '#00d52a',\n    T: '#00db24',\n    W: '#00a857',\n    Y: '#00e619',\n    V: '#005fa0',\n    B: '#00eb14',\n    X: '#00b649',\n    Z: '#00f10e',\n  },\n\n  jalview_hydrophobicity: {\n    A: '#ad0052',\n    R: '#0000ff',\n    N: '#0c00f3',\n    D: '#0c00f3',\n    C: '#c2003d',\n    Q: '#0c00f3',\n    E: '#0c00f3',\n    G: '#6a0095',\n    H: '#1500ea',\n    I: '#ff0000',\n    L: '#ea0015',\n    K: '#0000ff',\n    M: '#b0004f',\n    F: '#cb0034',\n    P: '#4600b9',\n    S: '#5e00a1',\n    T: '#61009e',\n    W: '#5b00a4',\n    Y: '#4f00b0',\n    V: '#f60009',\n    B: '#0c00f3',\n    X: '#680097',\n    Z: '#0c00f3',\n  },\n\n  jalview_prophelix: {\n    A: '#e718e7',\n    R: '#6f906f',\n    N: '#1be41b',\n    D: '#778877',\n    C: '#23dc23',\n    Q: '#926d92',\n    E: '#ff00ff',\n    G: '#00ff00',\n    H: '#758a75',\n    I: '#8a758a',\n    L: '#ae51ae',\n    K: '#a05fa0',\n    M: '#ef10ef',\n    F: '#986798',\n    P: '#00ff00',\n    S: '#36c936',\n    T: '#47b847',\n    W: '#8a758a',\n    Y: '#21de21',\n    V: '#857a85',\n    B: '#49b649',\n    X: '#758a75',\n    Z: '#c936c9',\n  },\n\n  jalview_propstrand: {\n    A: '#5858a7',\n    R: '#6b6b94',\n    N: '#64649b',\n    D: '#2121de',\n    C: '#9d9d62',\n    Q: '#8c8c73',\n    E: '#0000ff',\n    G: '#4949b6',\n    H: '#60609f',\n    I: '#ecec13',\n    L: '#b2b24d',\n    K: '#4747b8',\n    M: '#82827d',\n    F: '#c2c23d',\n    P: '#2323dc',\n    S: '#4949b6',\n    T: '#9d9d62',\n    W: '#c0c03f',\n    Y: '#d3d32c',\n    V: '#ffff00',\n    B: '#4343bc',\n    X: '#797986',\n    Z: '#4747b8',\n  },\n\n  jalview_propturn: {\n    A: '#2cd3d3',\n    R: '#708f8f',\n    N: '#ff0000',\n    D: '#e81717',\n    C: '#a85757',\n    Q: '#3fc0c0',\n    E: '#778888',\n    G: '#ff0000',\n    H: '#708f8f',\n    I: '#00ffff',\n    L: '#1ce3e3',\n    K: '#7e8181',\n    M: '#1ee1e1',\n    F: '#1ee1e1',\n    P: '#f60909',\n    S: '#e11e1e',\n    T: '#738c8c',\n    W: '#738c8c',\n    Y: '#9d6262',\n    V: '#07f8f8',\n    B: '#f30c0c',\n    X: '#7c8383',\n    Z: '#5ba4a4',\n  },\n\n  jalview_taylor: {\n    A: '#ccff00',\n    R: '#0000ff',\n    N: '#cc00ff',\n    D: '#ff0000',\n    C: '#ffff00',\n    Q: '#ff00cc',\n    E: '#ff0066',\n    G: '#ff9900',\n    H: '#0066ff',\n    I: '#66ff00',\n    L: '#33ff00',\n    K: '#6600ff',\n    M: '#00ff00',\n    F: '#00ff66',\n    P: '#ffcc00',\n    S: '#ff3300',\n    T: '#ff6600',\n    W: '#00ccff',\n    Y: '#00ffcc',\n    V: '#99ff00',\n  },\n\n  jalview_zappo: {\n    A: '#ffafaf',\n    R: '#6464ff',\n    N: '#00ff00',\n    D: '#ff0000',\n    C: '#ffff00',\n    Q: '#00ff00',\n    E: '#ff0000',\n    G: '#ff00ff',\n    H: '#6464ff',\n    I: '#ffafaf',\n    L: '#ffafaf',\n    K: '#6464ff',\n    M: '#ffafaf',\n    F: '#ffc800',\n    P: '#ff00ff',\n    S: '#00ff00',\n    T: '#00ff00',\n    W: '#ffc800',\n    Y: '#ffc800',\n    V: '#ffafaf',\n  },\n\n  cinema: {\n    H: 'blue',\n    K: 'blue',\n    R: 'blue',\n    D: 'red',\n    E: 'red',\n    S: 'green',\n    T: 'green',\n    N: 'green',\n    Q: 'green',\n    A: 'white',\n    V: 'white',\n    L: 'white',\n    I: 'white',\n    M: 'white',\n    F: 'magenta',\n    W: 'magenta',\n    Y: 'magenta',\n    P: 'brown',\n    G: 'brown',\n    C: 'yellow',\n    B: 'gray',\n    Z: 'gray',\n    X: 'gray',\n    '-': 'gray',\n    '.': 'gray',\n  },\n} as { [key: string]: { [key: string]: string } }\n\n// turn all supplied colors to hex colors which getContrastText from mui\n// requires\nexport default transform(colorSchemes, ([key, val]) => [\n  key,\n  transform(val, ([letter, color]) => [letter, Color(color).hex()]),\n])\n","/**\n * Newick format parser in JavaScript.\n *\n * Copyright (c) Jason Davies 2010.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * Example tree (from http://en.wikipedia.org/wiki/Newick_format):\n *\n * +--0.1--A\n * F-----0.2-----B            +-------0.3----C\n * +------------------0.5-----E\n *                            +---------0.4------D\n *\n * Newick format:\n * (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\n *\n * Converted to JSON:\n * {\n *   name: \"F\",\n *   branchset: [\n *     {name: \"A\", length: 0.1},\n *     {name: \"B\", length: 0.2},\n *     {\n *       name: \"E\",\n *       length: 0.5,\n *       branchset: [\n *         {name: \"C\", length: 0.3},\n *         {name: \"D\", length: 0.4}\n *       ]\n *     }\n *   ]\n * }\n *\n * Converted to JSON, but with no names or lengths:\n * {\n *   branchset: [\n *     {}, {}, {\n *       branchset: [{}, {}]\n *     }\n *   ]\n * }\n */\nexport default function parse(s) {\n  const ancestors = []\n  let tree = {}\n  const tokens = s.split(/\\s*(;|\\(|\\)|,|:)\\s*/)\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n    const subtree = {}\n    switch (token) {\n      case '(': // new branchset\n        tree.branchset = [subtree]\n        ancestors.push(tree)\n        tree = subtree\n        break\n      case ',': // another branch\n        ancestors[ancestors.length - 1].branchset.push(subtree)\n        tree = subtree\n        break\n      case ')': // optional name next\n        tree = ancestors.pop()\n        break\n      case ':': // optional length next\n        break\n      default: {\n        const x = tokens[i - 1]\n        if (x === ')' || x === '(' || x === ',') {\n          tree.name = token\n        } else if (x === ':') {\n          tree.length = parseFloat(token)\n        }\n      }\n    }\n  }\n  return tree\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { MsaViewModel } from '../model'\nimport { observer } from 'mobx-react'\nimport { Typography } from '@material-ui/core'\n\nimport ImportForm from './ImportForm'\nimport TreeCanvas from './TreeCanvas'\nimport MSACanvas from './MSACanvas'\nimport Ruler from './Ruler'\nimport TreeRuler from './TreeRuler'\nimport Header from './Header'\n\nconst resizeHandleWidth = 5\n\nexport default observer(({ model }: { model: MsaViewModel }) => {\n  const { done, initialized, treeAreaWidth } = model\n  const [cropMouseDown, setCropMouseDown] = useState(false)\n\n  // this has the effect of just \"cropping\" the tree area\n  useEffect(() => {\n    if (cropMouseDown) {\n      const listener = (event: MouseEvent) => {\n        model.setTreeAreaWidth(model.treeAreaWidth + event.movementX)\n      }\n\n      const listener2 = () => setCropMouseDown(false)\n\n      document.addEventListener('mousemove', listener)\n      document.addEventListener('mouseup', listener2)\n      return () => {\n        document.removeEventListener('mousemove', listener)\n        document.removeEventListener('mouseup', listener2)\n      }\n    }\n    return () => {}\n  }, [cropMouseDown])\n\n  if (!initialized) {\n    return <ImportForm model={model} />\n  } else if (!done) {\n    return <Typography variant=\"h4\">Loading...</Typography>\n  } else {\n    const { height } = model\n\n    return (\n      <div style={{ height, overflow: 'hidden' }}>\n        <Header model={model} />\n        <div>\n          <div style={{ display: 'flex', height: 20 }}>\n            <div style={{ overflow: 'hidden', width: treeAreaWidth }}>\n              <TreeRuler model={model} />\n            </div>\n\n            <div style={{ width: resizeHandleWidth }}></div>\n            <Ruler model={model} />\n          </div>\n          <div\n            style={{\n              display: 'flex',\n            }}\n          >\n            <div style={{ overflow: 'hidden', width: treeAreaWidth }}>\n              <TreeCanvas model={model} />\n            </div>\n            <div>\n              <div\n                onMouseDown={() => {\n                  setCropMouseDown(true)\n                }}\n                style={{\n                  cursor: 'ew-resize',\n                  height: '100%',\n                  width: resizeHandleWidth,\n                  background: `rgba(200,200,200)`,\n                  position: 'relative',\n                }}\n              >\n                <div\n                  style={{\n                    overflow: 'hidden',\n                    position: 'absolute',\n                    top: '20%',\n                    height: '60%',\n                    width: 1,\n                    left: resizeHandleWidth / 2 - 0.5,\n                    background: 'grey',\n                    zIndex: 20,\n                  }}\n                />\n              </div>\n            </div>\n            <MSACanvas model={model} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n})\n","import React, { useState } from 'react'\nimport { Button, Container, Grid, Typography, Link } from '@material-ui/core'\nimport { observer } from 'mobx-react'\nimport { transaction } from 'mobx'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { MsaViewModel } from '../model'\nimport { smallTree, smallMSA } from './data/seq2'\n\nexport default observer(({ model }: { model: MsaViewModel }) => {\n  const [msaFile, setMsaFile] = useState()\n  const [treeFile, setTreeFile] = useState()\n\n  return (\n    <Container>\n      <div style={{ width: '50%' }}>\n        <Typography>\n          Open an MSA file (stockholm or clustal format) and/or a tree file\n          (newick format).\n        </Typography>\n        <Typography color=\"error\">\n          Note: you can open up just an MSA or just a tree, both are not\n          required. Some MSA files e.g. stockholm format have an embedded tree\n          also and this is fine, and opening a separate tree file is not\n          required.\n        </Typography>\n      </div>\n\n      <Grid container spacing={10} justify=\"center\" alignItems=\"center\">\n        <Grid item>\n          <Typography>MSA file or URL</Typography>\n          <FileSelector\n            location={msaFile}\n            //@ts-ignore\n            setLocation={setMsaFile}\n            localFileAllowed\n          />\n          <Typography>Tree file or URL</Typography>\n          <FileSelector\n            location={treeFile}\n            //@ts-ignore\n            setLocation={setTreeFile}\n            localFileAllowed\n          />\n        </Grid>\n\n        <Grid item>\n          <Button\n            onClick={() => {\n              if (msaFile) {\n                model.setMSAFilehandle(msaFile)\n              }\n              if (treeFile) {\n                model.setTreeFilehandle(treeFile)\n              }\n            }}\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!msaFile && !treeFile}\n          >\n            Open\n          </Button>\n        </Grid>\n\n        <Grid item>\n          <Typography>Examples</Typography>\n          <ul>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setTreeFilehandle({\n                    uri: 'https://jbrowse.org/genomes/newick_trees/sarscov2phylo.pub.ft.nh',\n                  })\n                }}\n              >\n                230k COVID-19 samples (tree only)\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setData({ msa: smallMSA, tree: smallTree })\n                }}\n              >\n                Small protein+tree\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri: 'https://ihh.github.io/abrowse/build/pfam-cov2.stock',\n                  })\n                }}\n              >\n                PFAM SARS-CoV2 multi-stockholm\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/Lysine.stock',\n                  })\n                }}\n              >\n                Lysine stockholm file\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/PF01601_full.txt',\n                  })\n                }}\n              >\n                PF01601 stockholm file (SARS-CoV2 spike protein)\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  model.setMSAFilehandle({\n                    uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/europe_covid.fa',\n                  })\n                }}\n              >\n                Europe COVID full genomes (LR883044.1 and 199 other sequences)\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"#\"\n                onClick={() => {\n                  transaction(() => {\n                    model.setMSAFilehandle({\n                      uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/rhv_test-only.aligned_with_mafft_auto.fa',\n                    })\n                    model.setTreeFilehandle({\n                      uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/rhv_test-only.aligned_with_mafft_auto.nh',\n                    })\n                  })\n                }}\n              >\n                MAFFT+VeryFastTree(17.9k samples)\n              </Link>\n            </li>\n          </ul>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n})\n","export const smallMSA = `CLUSTAL O(1.2.3) multiple sequence alignment\nUniProt/Swiss-Prot|P26898|IL2RA_SHEEP      MEPSLLMWRFFVFIVVPGCVTEACHDDPPSLRNA----------MFKVLRYE----VGTM\nUniProt/Swiss-Prot|P01590|IL2RA_MOUSE      MEPRLLMLGFLSLTIVPSCRAELCLYDPPEVPNA----------TFKALSYK----NGTI\nUniProt/Swiss-Prot|P41690|IL2RA_FELCA      MEPSLLLWGILTFVVVHGHVTELCDENPPDIQHA----------TFKALTYK----TGTM\nUniProt/Swiss-Prot|P01589|IL2RA_HUMAN      MDSYLLMWGLLTFIMVPGCQAELCDDDPPEIPHA----------TFKAMAYK----EGTM\nUniProt/Swiss-Prot|Q5MNY4|IL2RA_MACMU      MDPYLLMWGLLTFITVPGCQAELCDDDPPKITHA----------TFKAVAYK----EGTM\nUniProt/Swiss-Prot|Q95118|IL2RG_BOVIN      -----------------------------------LLMWGLLT-----------------\nUniProt/Swiss-Prot|P40321|IL2RG_CANFA      MLKPPLPLRSLLFLQLSLLGVGLNSTVPMPNGNEDIT------PDFFLTATPSETLSVSS\nUniProt/Swiss-Prot|P26896|IL2RB_RAT        MATVDLSWRLPLYILLLLLATT--------------------------------WVSAAV\nUniProt/Swiss-Prot|Q8BZM1|GLMN_MOUSE       PLPLRSLLFLQLPLLGVGLNP------------------PLPLRSLLFLQLPLLGVGLNP\nUniProt/Swiss-Prot|P36835|IL2_CAPHI        -----------LLGVGLNPKFLTP------------------------------------\nUniProt/Swiss-Prot|Q7JFM4|IL2_AOTVO        MLKPPLPLRSLLFLQLPLLGVGLNPKFLTPSGNEDIGGKPGTGGDFFLTSTPAGTLDVST\nUniProt/Swiss-Prot|Q29416|IL2_CANFA        --------------LFLQLSLLG-------------------------------------\n`\n\nexport const smallTree =\n  '(((UniProt/Swiss-Prot|P26898|IL2RA_SHEEP:0.24036,(UniProt/Swiss-Prot|P41690|IL2RA_FELCA:0.17737,(UniProt/Swiss-Prot|P01589|IL2RA_HUMAN:0.03906,UniProt/Swiss-Prot|Q5MNY4|IL2RA_MACMU:0.03787):0.13033):0.04964):0.02189,UniProt/Swiss-Prot|P01590|IL2RA_MOUSE:0.23072):0.06814,(((UniProt/Swiss-Prot|Q95118|IL2RG_BOVIN:0.09600,UniProt/Swiss-Prot|P40321|IL2RG_CANFA:0.09845):0.25333,UniProt/Swiss-Prot|Q29416|IL2_CANFA:-0.35055):0.10231,(UniProt/Swiss-Prot|P26896|IL2RB_RAT:0.33631,UniProt/Swiss-Prot|Q7JFM4|IL2_AOTVO:-0.33631):0.10166):0.01607,(UniProt/Swiss-Prot|Q8BZM1|GLMN_MOUSE:0.32378,UniProt/Swiss-Prot|P36835|IL2_CAPHI:-0.32378):0.09999)'\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Menu, MenuItem } from '@material-ui/core'\nimport normalizeWheel from 'normalize-wheel'\nimport { observer } from 'mobx-react'\nimport { MsaViewModel } from '../model'\n\nconst extendBounds = 5\nconst radius = 3.5\nconst d = radius * 2\n\nfunction randomColor() {\n  return [\n    Math.floor(Math.random() * 255),\n    Math.floor(Math.random() * 255),\n    Math.floor(Math.random() * 255),\n  ]\n}\n\nconst padding = 600\n\ntype StrMap = { [key: string]: { id: string; name: string } }\ninterface TooltipData {\n  name: string\n  id: string\n  x: number\n  y: number\n}\nconst TreeBlock = observer(\n  ({ model, offsetY }: { model: MsaViewModel; offsetY: number }) => {\n    const ref = useRef<HTMLCanvasElement>(null)\n    const menuRef = useRef<HTMLDivElement>(null)\n    const clickRef = useRef<HTMLCanvasElement>(null)\n    const [colorMap, setColorMap] = useState<StrMap>({})\n    const [hovering, setHovering] = useState<TooltipData>()\n    const {\n      hierarchy,\n      rowHeight,\n      scrollY,\n      treeWidth,\n      showBranchLen,\n      collapsed,\n      margin,\n      noTree,\n      blockSize,\n      drawNodeBubbles,\n    } = model\n\n    useEffect(() => {\n      if (!ref.current || !clickRef.current) {\n        return\n      }\n      const ctx = ref.current.getContext('2d')\n      const clickCtx = clickRef.current.getContext('2d')\n      if (!ctx || !clickCtx) {\n        return\n      }\n      const colorHash: StrMap = {}\n      ;[ctx, clickCtx].forEach((context) => {\n        context.resetTransform()\n        context.clearRect(0, 0, treeWidth + padding, blockSize)\n        context.translate(margin.left, -offsetY)\n      })\n\n      const font = ctx.font\n      ctx.font = font.replace(/\\d+px/, `${Math.max(8, rowHeight - 8)}px`)\n\n      if (!noTree) {\n        hierarchy.links().forEach(({ source, target }) => {\n          const y = showBranchLen ? 'len' : 'y'\n          //@ts-ignore\n          const { x: sy, [y]: sx } = source\n          //@ts-ignore\n          const { x: ty, [y]: tx } = target\n\n          const y1 = Math.min(sy, ty)\n          const y2 = Math.max(sy, ty)\n          //1d line intersection to check if line crosses block at all, this\n          //is an optimization that allows us to skip drawing most tree links\n          //outside the block\n          if (offsetY + blockSize >= y1 && y2 >= offsetY) {\n            ctx.beginPath()\n            ctx.moveTo(sx, sy)\n            ctx.lineTo(sx, ty)\n            ctx.lineTo(tx, ty)\n            ctx.stroke()\n          }\n        })\n\n        if (drawNodeBubbles) {\n          hierarchy.descendants().forEach((node) => {\n            const val = showBranchLen ? 'len' : 'y'\n            const {\n              //@ts-ignore\n              x: y,\n              //@ts-ignore\n              [val]: x,\n              data,\n            } = node\n            const { id = '', name = '' } = data\n\n            if (\n              y > offsetY - extendBounds &&\n              y < offsetY + blockSize + extendBounds\n            ) {\n              ctx.strokeStyle = 'black'\n              ctx.fillStyle = collapsed.includes(id) ? 'black' : 'white'\n              ctx.beginPath()\n              ctx.arc(x, y, radius, 0, 2 * Math.PI)\n              ctx.fill()\n              ctx.stroke()\n\n              const col = randomColor()\n              const [r, g, b] = col\n              colorHash[`${col}`] = { id, name }\n\n              clickCtx.fillStyle = `rgb(${r},${g},${b})`\n              clickCtx.fillRect(x - radius, y - radius, d, d)\n            }\n          })\n        }\n      }\n\n      if (rowHeight >= 10) {\n        ctx.fillStyle = 'black'\n        hierarchy.leaves().forEach((node) => {\n          const {\n            //@ts-ignore\n            x: y,\n            //@ts-ignore\n            y: x,\n            data: { name },\n            //@ts-ignore\n            len,\n          } = node\n          if (\n            y > offsetY - extendBounds &&\n            y < offsetY + blockSize + extendBounds\n          ) {\n            //note: +rowHeight/4 matches with -rowHeight/4 in msa\n            ctx.fillText(name, (showBranchLen ? len : x) + d, y + rowHeight / 4)\n          }\n        })\n      }\n      setColorMap(colorHash)\n    }, [\n      collapsed,\n      rowHeight,\n      margin.left,\n      hierarchy,\n      offsetY,\n      treeWidth,\n      showBranchLen,\n      noTree,\n      blockSize,\n      drawNodeBubbles,\n    ])\n\n    function decode(event: React.MouseEvent) {\n      const x = event.nativeEvent.offsetX\n      const y = event.nativeEvent.offsetY\n      if (!clickRef.current) {\n        return\n      }\n      const clickCtx = clickRef.current.getContext('2d')\n      if (!clickCtx) {\n        return\n      }\n      const { data } = clickCtx.getImageData(x, y, 1, 1)\n\n      const col = [data[0], data[1], data[2]]\n      return { ...colorMap[`${col}`], x, y }\n    }\n    function handleClose() {\n      setHovering(undefined)\n    }\n    return (\n      <>\n        <div\n          ref={menuRef}\n          style={{\n            position: 'absolute',\n            left: hovering?.x || 0,\n            top: scrollY + offsetY + (hovering?.y || 0),\n          }}\n        />\n        {hovering && hovering.id ? (\n          <Menu\n            anchorEl={menuRef.current}\n            transitionDuration={0}\n            keepMounted\n            open={Boolean(menuRef.current)}\n            onClose={handleClose}\n          >\n            <MenuItem\n              dense\n              onClick={() => {\n                model.toggleCollapsed(hovering.id)\n                handleClose()\n              }}\n            >\n              {model.collapsed.includes(hovering.id) ? 'Expand' : 'Collapse'}\n            </MenuItem>\n          </Menu>\n        ) : null}\n        <canvas\n          width={treeWidth + padding}\n          height={blockSize}\n          style={{\n            width: treeWidth + padding,\n            height: blockSize,\n            top: scrollY + offsetY,\n            left: 0,\n            position: 'absolute',\n          }}\n          onMouseMove={(event) => {\n            if (!ref.current) {\n              return\n            }\n            const data = decode(event)\n            if (data) {\n              if (data.id) {\n                ref.current.style.cursor = 'pointer'\n              } else {\n                ref.current.style.cursor = 'default'\n              }\n            }\n          }}\n          onClick={(event) => {\n            const data = decode(event)\n            if (data && data.id) {\n              setHovering(data)\n            }\n          }}\n          ref={ref}\n        />\n        <canvas\n          style={{ display: 'none' }}\n          width={treeWidth + padding}\n          height={blockSize}\n          ref={clickRef}\n        />\n      </>\n    )\n  },\n)\nconst TreeCanvas = observer(({ model }: { model: MsaViewModel }) => {\n  const ref = useRef<HTMLDivElement>(null)\n  const scheduled = useRef(false)\n  const deltaY = useRef(0)\n  const { treeWidth, height, blocksY } = model\n\n  useEffect(() => {\n    const curr = ref.current\n    if (!curr) {\n      return\n    }\n    function onWheel(origEvent: WheelEvent) {\n      const event = normalizeWheel(origEvent)\n      deltaY.current += event.pixelY\n\n      if (!scheduled.current) {\n        scheduled.current = true\n        requestAnimationFrame(() => {\n          model.doScrollY(-deltaY.current)\n          deltaY.current = 0\n          scheduled.current = false\n        })\n      }\n      origEvent.preventDefault()\n    }\n    curr.addEventListener('wheel', onWheel)\n    return () => {\n      curr.removeEventListener('wheel', onWheel)\n    }\n  }, [model])\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        height,\n        position: 'relative',\n        overflow: 'hidden',\n        width: treeWidth + padding,\n      }}\n    >\n      {blocksY.map((block) => (\n        <TreeBlock key={block} model={model} offsetY={block} />\n      ))}\n    </div>\n  )\n})\n\nexport default TreeCanvas\n","import React, { useEffect, useRef, useMemo } from 'react'\nimport { Typography, CircularProgress, useTheme } from '@material-ui/core'\nimport normalizeWheel from 'normalize-wheel'\nimport Color from 'color'\nimport { observer } from 'mobx-react'\n\nimport colorSchemes from '../colorSchemes'\nimport { transform } from '../util'\nimport { MsaViewModel } from '../model'\n\nconst MSABlock = observer(\n  ({\n    model,\n    offsetX,\n    offsetY,\n  }: {\n    model: MsaViewModel\n    offsetX: number\n    offsetY: number\n  }) => {\n    const {\n      MSA,\n      colWidth,\n      bgColor,\n      columns,\n      rowHeight,\n      scrollY,\n      scrollX,\n      hierarchy,\n      colorSchemeName,\n      blockSize,\n    } = model\n    const theme = useTheme()\n\n    const colorScheme = colorSchemes[colorSchemeName]\n    const colorContrast = useMemo(\n      () =>\n        transform(colorScheme, ([letter, color]) => [\n          letter,\n          theme.palette.getContrastText(Color(color).hex()),\n        ]),\n      [colorScheme],\n    )\n    const ref = useRef<HTMLCanvasElement>(null)\n    useEffect(() => {\n      if (!ref.current) {\n        return\n      }\n\n      const ctx = ref.current.getContext('2d')\n      if (!ctx) {\n        return\n      }\n\n      ctx.resetTransform()\n      ctx.clearRect(0, 0, blockSize, blockSize)\n      ctx.translate(-offsetX, rowHeight / 2 - offsetY)\n      ctx.textAlign = 'center'\n      ctx.font = ctx.font.replace(/\\d+px/, `${Math.max(8, rowHeight - 12)}px`)\n\n      const leaves = hierarchy.leaves()\n      const b = blockSize\n\n      // slice vertical rows, e.g. tree leaves, avoid negative slice\n      const yStart = Math.max(0, Math.floor((offsetY - rowHeight) / rowHeight))\n      const yEnd = Math.max(0, Math.ceil((offsetY + b + rowHeight) / rowHeight))\n\n      // slice horizontal visible letters, avoid negative slice\n      const xStart = Math.max(0, Math.floor(offsetX / colWidth))\n      const xEnd = Math.max(0, Math.ceil((offsetX + b) / colWidth))\n      const visibleLeaves = leaves.slice(yStart, yEnd)\n      visibleLeaves.forEach((node) => {\n        const {\n          //@ts-ignore\n          x: y,\n          //@ts-ignore\n          data: { name },\n        } = node\n\n        const str = columns[name]?.slice(xStart, xEnd)\n        for (let i = 0; i < str?.length; i++) {\n          const letter = str[i]\n          const color = colorScheme[letter.toUpperCase()]\n          if (bgColor) {\n            const x = i * colWidth + offsetX - (offsetX % colWidth)\n            ctx.fillStyle = color || 'white'\n            ctx.fillRect(x, y - rowHeight, colWidth, rowHeight)\n          }\n        }\n      })\n\n      if (rowHeight >= 10 && colWidth >= rowHeight / 2) {\n        visibleLeaves.forEach((node) => {\n          const {\n            //@ts-ignore\n            x: y,\n            //@ts-ignore\n            data: { name },\n          } = node\n\n          const str = columns[name]?.slice(xStart, xEnd)\n          for (let i = 0; i < str?.length; i++) {\n            const letter = str[i]\n            const color = colorScheme[letter.toUpperCase()]\n            const contrast = colorContrast[letter.toUpperCase()] || 'black'\n            const x = i * colWidth + offsetX - (offsetX % colWidth)\n\n            //note: -rowHeight/4 matches +rowHeight/4 in tree\n            ctx.fillStyle = bgColor ? contrast : color || 'black'\n            ctx.fillText(\n              letter,\n              Math.floor(x + colWidth / 2),\n              Math.floor(y - rowHeight / 4),\n            )\n          }\n        })\n      }\n    }, [\n      MSA,\n      columns,\n      colorScheme,\n      colorContrast,\n      bgColor,\n      rowHeight,\n      colWidth,\n      hierarchy,\n      offsetX,\n      offsetY,\n      blockSize,\n    ])\n\n    return (\n      <canvas\n        ref={ref}\n        width={blockSize}\n        onMouseMove={(event) => {\n          if (!ref.current) {\n            return\n          }\n          const mouseX =\n            event.clientX - ref.current.getBoundingClientRect().left\n          model.setMousePos(Math.floor((mouseX + offsetX) / colWidth) + 1)\n        }}\n        height={blockSize}\n        style={{\n          position: 'absolute',\n          top: scrollY + offsetY,\n          left: scrollX + offsetX,\n          width: blockSize,\n          height: blockSize,\n        }}\n      />\n    )\n  },\n)\n\nconst MSACanvas = observer(({ model }: { model: MsaViewModel }) => {\n  const { MSA, msaFilehandle, height, msaAreaWidth, blocksX, blocksY } = model\n  const ref = useRef<HTMLDivElement>(null)\n  const scheduled = useRef(false)\n  const deltaX = useRef(0)\n  const deltaY = useRef(0)\n  useEffect(() => {\n    const curr = ref.current\n    if (!curr) {\n      return\n    }\n    function onWheel(origEvent: WheelEvent) {\n      const event = normalizeWheel(origEvent)\n      deltaX.current += event.pixelX\n      deltaY.current += event.pixelY\n\n      if (!scheduled.current) {\n        scheduled.current = true\n        requestAnimationFrame(() => {\n          model.doScrollX(-deltaX.current)\n          model.doScrollY(-deltaY.current)\n          deltaX.current = 0\n          deltaY.current = 0\n          scheduled.current = false\n        })\n      }\n      origEvent.preventDefault()\n    }\n    curr.addEventListener('wheel', onWheel)\n    return () => {\n      curr.removeEventListener('wheel', onWheel)\n    }\n  }, [model])\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        position: 'relative',\n        height,\n        width: msaAreaWidth,\n        overflow: 'hidden',\n      }}\n    >\n      {!MSA && !msaFilehandle ? null : !MSA ? (\n        <div style={{ position: 'absolute', left: '50%', top: '50%' }}>\n          <CircularProgress />\n          <Typography>Loading...</Typography>\n        </div>\n      ) : (\n        blocksY\n          .map((by) =>\n            blocksX.map((bx) => (\n              <MSABlock\n                key={`${bx}_${by}`}\n                model={model}\n                offsetX={bx}\n                offsetY={by}\n              />\n            )),\n          )\n          .flat()\n      )}\n    </div>\n  )\n})\n\nexport default MSACanvas\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core'\nimport { observer } from 'mobx-react'\nimport { MsaViewModel } from '../model'\n\n/**\n * Given a scale ( bp/px ) and minimum distances (px) between major and minor\n * gridlines, return an object like `{ majorPitch: bp, minorPitch: bp }` giving\n * the gridline pitches to use.\n */\nexport function chooseGridPitch(\n  scale: number,\n  minMajorPitchPx: number,\n  minMinorPitchPx: number,\n) {\n  scale = Math.abs(scale)\n  const minMajorPitchBp = minMajorPitchPx * scale\n  const majorMagnitude = parseInt(\n    Number(minMajorPitchBp).toExponential().split(/e/i)[1],\n    10,\n  )\n\n  let majorPitch = 10 ** majorMagnitude\n  while (majorPitch < minMajorPitchBp) {\n    majorPitch *= 2\n    if (majorPitch >= minMajorPitchBp) {\n      break\n    }\n    majorPitch *= 2.5\n  }\n\n  majorPitch = Math.max(majorPitch, 5)\n\n  const majorPitchPx = majorPitch / scale\n\n  let minorPitch = 0\n  if (!(majorPitch % 10) && majorPitchPx / 10 >= minMinorPitchPx) {\n    minorPitch = majorPitch / 10\n  } else if (!(majorPitch % 5) && majorPitchPx / 5 >= minMinorPitchPx) {\n    minorPitch = majorPitch / 5\n  } else if (!(majorPitch % 2) && majorPitchPx / 2 >= minMinorPitchPx) {\n    minorPitch = majorPitch / 2\n  }\n\n  return { majorPitch, minorPitch }\n}\nexport function makeTicks(\n  start: number,\n  end: number,\n  bpPerPx: number,\n  emitMajor = true,\n  emitMinor = true,\n) {\n  const gridPitch = chooseGridPitch(bpPerPx, 60, 15)\n\n  let minBase = start\n  let maxBase = end\n  if (minBase === null || maxBase === null) {\n    return []\n  }\n\n  if (bpPerPx < 0) {\n    [minBase, maxBase] = [maxBase, minBase]\n  }\n\n  // add 20px additional on the right and left to allow us to draw the ends\n  // of labels that lie a little outside our region\n  minBase -= Math.abs(20 * bpPerPx)\n  maxBase += Math.abs(20 * bpPerPx) + 1\n\n  const iterPitch = gridPitch.minorPitch || gridPitch.majorPitch\n  let index = 0\n  const ticks = []\n  for (\n    let base = Math.ceil(minBase / iterPitch) * iterPitch;\n    base < maxBase;\n    base += iterPitch\n  ) {\n    if (emitMinor && base % (gridPitch.majorPitch * 2)) {\n      ticks.push({ type: 'minor', base: base - 1, index })\n      index += 1\n    } else if (emitMajor && !(base % (gridPitch.majorPitch * 2))) {\n      ticks.push({ type: 'major', base: base - 1, index })\n      index += 1\n    }\n  }\n  return ticks\n}\n\nfunction mathPower(num: number): string {\n  if (num < 999) {\n    return String(num)\n  }\n  return `${mathPower(~~(num / 1000))},${`00${~~(num % 1000)}`.substr(-3, 3)}`\n}\n\nconst useStyles = makeStyles((/* theme */) => ({\n  majorTickLabel: {\n    fontSize: '11px',\n    // fill: theme.palette.text.primary,\n  },\n  majorTick: {\n    stroke: '#555',\n    // stroke: theme.palette.text.secondary,\n  },\n  minorTick: {\n    stroke: '#999',\n    // stroke: theme.palette.text.hint,\n  },\n}))\n\nfunction RulerBlock({\n  start,\n  end,\n  bpPerPx,\n  reversed,\n  major,\n  minor,\n}: {\n  start: number\n  end: number\n  bpPerPx: number\n  reversed?: boolean\n  major?: boolean\n  minor?: boolean\n}) {\n  const classes = useStyles()\n  const ticks = makeTicks(start, end, bpPerPx, major, minor)\n  return (\n    <>\n      {ticks.map((tick) => {\n        const x = (reversed ? end - tick.base : tick.base - start) / bpPerPx\n        return (\n          <line\n            key={tick.base}\n            x1={x}\n            x2={x}\n            y1={11}\n            y2={tick.type === 'major' ? 11 + 6 : 11 + 4}\n            strokeWidth={1}\n            stroke={tick.type === 'major' ? '#555' : '#999'}\n            className={\n              tick.type === 'major' ? classes.majorTick : classes.minorTick\n            }\n            data-bp={tick.base}\n          />\n        )\n      })}\n      {ticks\n        .filter((tick) => tick.type === 'major')\n        .map((tick) => {\n          const x = (reversed ? end - tick.base : tick.base - start) / bpPerPx\n          return (\n            <text\n              x={x}\n              y={10}\n              key={`label-${tick.base}`}\n              textAnchor=\"middle\"\n              style={{ fontSize: '11px' }}\n              className={classes.majorTickLabel}\n            >\n              {mathPower(tick.base + 1)}\n            </text>\n          )\n        })}\n    </>\n  )\n}\nconst Ruler = observer(({ model }: { model: MsaViewModel }) => {\n  const { colWidth, msaAreaWidth, scrollX, blocksX, blockSize } = model\n  const offsetX = blocksX[0]\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        width: msaAreaWidth,\n        overflow: 'hidden',\n        height: 20,\n      }}\n    >\n      <svg\n        style={{\n          width: blocksX.length * blockSize,\n          position: 'absolute',\n          left: scrollX + offsetX,\n        }}\n      >\n        <RulerBlock\n          key={offsetX}\n          start={offsetX / colWidth}\n          end={offsetX / colWidth + (blockSize * blocksX.length) / colWidth}\n          bpPerPx={1 / colWidth}\n        />\n      </svg>\n    </div>\n  )\n})\n\nexport default Ruler\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { MsaViewModel } from '../model'\n\nconst TreeRuler = observer(({ model }: { model: MsaViewModel }) => {\n  const { treeWidth } = model\n  return <div style={{ width: treeWidth }} />\n})\n\nexport default TreeRuler\n","import React, { useState } from 'react'\nimport { IconButton, Select } from '@material-ui/core'\nimport { MsaViewModel } from '../model'\nimport { observer } from 'mobx-react'\n\nimport SettingsDialog from './SettingsDlg'\nimport AboutDialog from './AboutDlg'\nimport DetailsDialog from './DetailsDlg'\n\n//icons\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport InfoIcon from '@material-ui/icons/Info'\nimport AssignmentIcon from '@material-ui/icons/Assignment'\n\nconst Header = observer(({ model }: { model: MsaViewModel }) => {\n  const [settingsDialogVisible, setSettingsDialogVisible] = useState(false)\n  const [aboutDialogVisible, setAboutDialogVisible] = useState(false)\n  const [detailsDialogVisible, setDetailsDialogVisible] = useState(false)\n  const { currentAlignment, alignmentNames } = model\n\n  return (\n    <div style={{ display: 'block' }}>\n      <IconButton\n        onClick={() => {\n          model.setData({ tree: '', msa: '' })\n          model.setTreeFilehandle(undefined)\n          model.setMSAFilehandle(undefined)\n          model.setScrollY(0)\n          model.setScrollX(0)\n          model.setCurrentAlignment(0)\n        }}\n      >\n        <FolderOpenIcon />\n      </IconButton>\n      <IconButton\n        onClick={() => {\n          setSettingsDialogVisible(true)\n        }}\n      >\n        <SettingsIcon />\n      </IconButton>\n\n      <IconButton\n        onClick={() => {\n          setAboutDialogVisible(true)\n        }}\n      >\n        <InfoIcon />\n      </IconButton>\n\n      <IconButton\n        onClick={() => {\n          setDetailsDialogVisible(true)\n        }}\n      >\n        <AssignmentIcon />\n      </IconButton>\n      <SettingsDialog\n        open={settingsDialogVisible}\n        model={model}\n        onClose={() => setSettingsDialogVisible(false)}\n      />\n      <AboutDialog\n        open={aboutDialogVisible}\n        onClose={() => setAboutDialogVisible(false)}\n      />\n\n      <DetailsDialog\n        open={detailsDialogVisible}\n        model={model}\n        onClose={() => setDetailsDialogVisible(false)}\n      />\n      {alignmentNames.length > 0 ? (\n        <Select\n          native\n          value={currentAlignment}\n          onChange={(event) => {\n            //@ts-ignore\n            model.setCurrentAlignment(+event.target.value)\n            model.setScrollX(0)\n            model.setScrollY(0)\n          }}\n        >\n          {alignmentNames.map((option, index) => (\n            <option key={option + '-' + index} value={index}>\n              {option}\n            </option>\n          ))}\n        </Select>\n      ) : null}\n    </div>\n  )\n})\n\nexport default Header\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  TextField,\n} from '@material-ui/core'\n\nimport { MsaViewModel } from '../model'\nimport colorSchemes from '../colorSchemes'\n\nexport default observer(\n  ({\n    model,\n    onClose,\n    open,\n  }: {\n    model: MsaViewModel\n    onClose: () => void\n    open: boolean\n  }) => {\n    const {\n      rowHeight: rowHeightInit,\n      colWidth: colWidthInit,\n      nameWidth: nameWidthInit,\n      treeWidth: treeWidthInit,\n      colorSchemeName,\n      noTree,\n    } = model\n    const [rowHeight, setRowHeight] = useState('' + rowHeightInit)\n    const [colWidth, setColWidth] = useState('' + colWidthInit)\n    const [nameWidth, setNameWidth] = useState('' + nameWidthInit)\n    const [treeWidth, setTreeWidth] = useState('' + treeWidthInit)\n\n    function error(n: string) {\n      return Number.isNaN(+n) || +n < 0\n    }\n    const rowHeightError = error(rowHeight)\n    const colWidthError = error(colWidth)\n    const nameWidthError = error(nameWidth)\n    const treeWidthError = error(treeWidth)\n\n    return (\n      <Dialog onClose={() => onClose()} open={open}>\n        <DialogTitle>Settings</DialogTitle>\n        <DialogContent>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.showBranchLen}\n                onChange={() => model.toggleBranchLen()}\n              />\n            }\n            label=\"Show branch length\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.bgColor}\n                onChange={() => model.toggleBgColor()}\n              />\n            }\n            label=\"Color background\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={model.drawNodeBubbles}\n                onChange={() => model.toggleNodeBubbles()}\n              />\n            }\n            label=\"Draw node bubbles\"\n          />\n\n          <TextField\n            label=\"Row height (px)\"\n            value={rowHeight}\n            error={rowHeightError}\n            onChange={(event) => setRowHeight(event.target.value)}\n          />\n          <TextField\n            label=\"Column width (px)\"\n            value={colWidth}\n            error={colWidthError}\n            onChange={(event) => setColWidth(event.target.value)}\n          />\n          <br />\n          {!noTree ? (\n            <TextField\n              label=\"Tree width (px)\"\n              value={treeWidth}\n              error={treeWidthError}\n              onChange={(event) => setTreeWidth(event.target.value)}\n            />\n          ) : null}\n          <TextField\n            label=\"Name width (px)\"\n            value={nameWidth}\n            error={nameWidthError}\n            onChange={(event) => setNameWidth(event.target.value)}\n          />\n          <br />\n\n          <TextField\n            select\n            label=\"Color scheme\"\n            value={colorSchemeName}\n            onChange={(event) => model.setColorSchemeName(event.target.value)}\n          >\n            {Object.keys(colorSchemes).map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </TextField>\n          <br />\n          <br />\n          <br />\n          <Button\n            disabled={\n              rowHeightError ||\n              colWidthError ||\n              nameWidthError ||\n              treeWidthError\n            }\n            onClick={() => {\n              model.setRowHeight(+rowHeight)\n              model.setColWidth(+colWidth)\n              model.setNameWidth(+nameWidth)\n              if (!noTree) {\n                model.setTreeWidth(+treeWidth)\n              }\n              onClose()\n            }}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Submit\n          </Button>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n","import React, { useState } from 'react'\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Typography,\n  Link,\n} from '@material-ui/core'\n\nfunction LicenseDialog({\n  onClose,\n  open,\n}: {\n  onClose: () => void\n  open: boolean\n}) {\n  return (\n    <Dialog onClose={() => onClose()} open={open}>\n      <DialogTitle>Biotite License</DialogTitle>\n      <DialogContent>\n        <pre style={{ height: 100, overflow: 'auto' }}>\n          {`\nCopyright 2017 - 2020, The Biotite contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        `}\n        </pre>\n      </DialogContent>\n    </Dialog>\n  )\n}\nexport default function AboutDialog({\n  onClose,\n  open,\n}: {\n  onClose: () => void\n  open: boolean\n}) {\n  const [dlgOpen, setDlgOpen] = useState(false)\n  return (\n    <>\n      <LicenseDialog onClose={() => setDlgOpen(false)} open={dlgOpen} />\n      <Dialog onClose={() => onClose()} open={open}>\n        <DialogTitle>About this plugin</DialogTitle>\n        <DialogContent>\n          <Typography>\n            JBrowse 2 MSAView plugin v1.0.0 (\n            <Link href=\"https://github.com/gmod/jbrowse-plugin-msaview\">\n              Github\n            </Link>\n            )\n          </Typography>\n\n          <ul>\n            <li>\n              We use some color schemes from the{' '}\n              <Link href=\"https://github.com/biotite-dev/biotite\">biotite</Link>{' '}\n              project, and their license is reproduced{' '}\n              <Link onClick={() => setDlgOpen(true)}>here</Link>\n            </li>\n            <li>\n              See this page for some information on jalview colorings{' '}\n              <Link href=\"https://www.jalview.org/help/html/colourSchemes/\">\n                here\n              </Link>\n            </li>\n            <li>\n              See this page for some info on the clustal, cinema, maeditor, and\n              lesk color schemes{' '}\n              <Link href=\"http://www.bioinformatics.nl/~berndb/aacolour.html\">\n                here\n              </Link>\n            </li>\n            <li>\n              See this paper about the flower color scheme{' '}\n              <Link href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7245768/\">\n                here\n              </Link>\n            </li>\n          </ul>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent } from '@material-ui/core'\nimport { observer } from 'mobx-react'\nimport { Attributes } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { MsaViewModel } from '../model'\n\nexport default observer(\n  ({\n    model,\n    onClose,\n    open,\n  }: {\n    model: MsaViewModel\n    onClose: () => void\n    open: boolean\n  }) => {\n    const { alignmentDetails } = model\n\n    return (\n      <Dialog onClose={() => onClose()} open={open}>\n        <DialogTitle>Metadata</DialogTitle>\n        <DialogContent>\n          <Attributes attributes={alignmentDetails} />\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n","import { Instance, cast, types, addDisposer } from 'mobx-state-tree'\nimport { hierarchy, cluster, HierarchyNode } from 'd3-hierarchy'\nimport { ascending, max } from 'd3-array'\nimport { FileLocation, ElementId } from '@jbrowse/core/util/types/mst'\nimport { FileLocation as FileLocationType } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { autorun } from 'mobx'\nimport BaseViewModel from '@jbrowse/core/pluggableElementTypes/models/BaseViewModel'\n\nimport Stockholm from 'stockholm-js'\nimport ClustalMSA from './parsers/ClustalMSA'\nimport StockholmMSA from './parsers/StockholmMSA'\nimport FastaMSA from './parsers/FastaMSA'\nimport parseNewick from './parseNewick'\nimport { generateNodeIds, NodeWithIds } from './util'\n\nfunction setBrLength(d: HierarchyNode<any>, y0: number, k: number) {\n  //@ts-ignore\n  d.len = (y0 += Math.max(d.data.length || 0, 0)) * k\n  if (d.children) {\n    d.children.forEach((d) => {\n      setBrLength(d, y0, k)\n    })\n  }\n}\n\nfunction maxLength(d: HierarchyNode<any>): number {\n  return (d.data.length || 1) + (d.children ? max(d.children, maxLength) : 0)\n}\n\n// note: we don't use this.root because it won't update in response to changes\n// in realWidth/totalHeight here otherwise, needs to generate a new object\nfunction getRoot(tree: any) {\n  return hierarchy(tree, (d) => d.branchset)\n    .sum((d) => (d.branchset ? 0 : 1))\n    .sort((a, b) => {\n      return ascending(a.data.length || 1, b.data.length || 1)\n    })\n}\n\nfunction filter(tree: NodeWithIds, collapsed: string[]): NodeWithIds {\n  const { branchset, ...rest } = tree\n  if (collapsed.includes(tree.id)) {\n    return rest\n  } else if (branchset) {\n    return {\n      ...rest,\n      branchset: branchset.map((b) => filter(b, collapsed)),\n    }\n  } else {\n    return tree\n  }\n}\n\nfunction clamp(min: number, num: number, max: number) {\n  return Math.min(Math.max(num, min), max)\n}\n\nconst model = types.snapshotProcessor(\n  types\n    .compose(\n      BaseViewModel,\n      types\n        .model('MsaView', {\n          id: ElementId,\n          type: types.literal('MsaView'),\n          height: 680,\n          treeAreaWidth: 400,\n          treeWidth: 400,\n          nameWidth: 200,\n          rowHeight: 20,\n          scrollY: 0,\n          scrollX: 0,\n          blockSize: 1000,\n          mousePos: types.maybe(types.number),\n          colWidth: 16,\n          showBranchLen: true,\n          bgColor: true,\n          drawNodeBubbles: true,\n          dragHandleType: 'crop',\n          colorSchemeName: 'maeditor',\n          treeFilehandle: types.maybe(FileLocation),\n          msaFilehandle: types.maybe(FileLocation),\n          currentAlignment: 0,\n          collapsed: types.array(types.string),\n          data: types.optional(\n            types\n              .model({\n                tree: types.maybe(types.string),\n                msa: types.maybe(types.string),\n              })\n              .actions((self) => ({\n                setTree(tree?: string) {\n                  self.tree = tree\n                },\n                setMSA(msa?: string) {\n                  self.msa = msa\n                },\n              })),\n            { tree: '', msa: '' },\n          ),\n        })\n        .volatile(() => ({\n          error: undefined as Error | undefined,\n          volatileWidth: 0,\n          margin: { left: 20, top: 20 },\n        }))\n        .actions((self) => ({\n          setError(error?: Error) {\n            self.error = error\n          },\n          setMousePos(pos?: number) {\n            self.mousePos = pos\n          },\n          setRowHeight(n: number) {\n            self.rowHeight = n\n          },\n          setColWidth(n: number) {\n            self.colWidth = n\n          },\n          setColorSchemeName(name: string) {\n            self.colorSchemeName = name\n          },\n          setScrollY(n: number) {\n            self.scrollY = n\n          },\n          setScrollX(n: number) {\n            self.scrollX = n\n          },\n          setTreeAreaWidth(n: number) {\n            self.treeAreaWidth = n\n          },\n          setTreeWidth(n: number) {\n            self.treeWidth = n\n          },\n          setNameWidth(n: number) {\n            self.nameWidth = n\n          },\n          setCurrentAlignment(n: number) {\n            self.currentAlignment = n\n          },\n          setDragHandleType(str: string) {\n            self.dragHandleType = str\n          },\n          toggleCollapsed(node: string) {\n            if (self.collapsed.includes(node)) {\n              self.collapsed.remove(node)\n            } else {\n              self.collapsed.push(node)\n            }\n          },\n          toggleBranchLen() {\n            self.showBranchLen = !self.showBranchLen\n          },\n          toggleBgColor() {\n            self.bgColor = !self.bgColor\n          },\n          toggleNodeBubbles() {\n            self.drawNodeBubbles = !self.drawNodeBubbles\n          },\n          setData(data: { msa: string; tree: string }) {\n            self.data = cast(data)\n          },\n          setWidth(width: number) {\n            self.volatileWidth = width\n          },\n          async setMSAFilehandle(msaFilehandle?: FileLocationType) {\n            if (msaFilehandle && 'blobId' in msaFilehandle) {\n              this.setMSA(\n                (await openLocation(msaFilehandle).readFile('utf8')) as string,\n              )\n            } else {\n              self.msaFilehandle = msaFilehandle\n            }\n          },\n          async setTreeFilehandle(treeFilehandle?: FileLocationType) {\n            if (treeFilehandle && 'blobId' in treeFilehandle) {\n              this.setTree(\n                (await openLocation(treeFilehandle).readFile('utf8')) as string,\n              )\n            } else {\n              self.treeFilehandle = treeFilehandle\n            }\n          },\n          setMSA(result: string) {\n            self.data.setMSA(result)\n          },\n          setTree(result: string) {\n            self.data.setTree(result)\n          },\n\n          afterCreate() {\n            addDisposer(\n              self,\n              autorun(async () => {\n                const { treeFilehandle } = self\n                if (treeFilehandle) {\n                  this.setTree(\n                    (await openLocation(treeFilehandle).readFile(\n                      'utf8',\n                    )) as string,\n                  )\n                }\n              }),\n            )\n            addDisposer(\n              self,\n              autorun(async () => {\n                const { msaFilehandle } = self\n\n                if (msaFilehandle) {\n                  this.setMSA(\n                    (await openLocation(msaFilehandle).readFile(\n                      'utf8',\n                    )) as string,\n                  )\n                }\n              }),\n            )\n          },\n        }))\n        .views((self) => {\n          let oldBlocksX: number[] = []\n          let oldBlocksY: number[] = []\n          let oldValX = 0\n          let oldValY = 0\n          return {\n            get initialized() {\n              return (\n                self.data.msa ||\n                self.data.tree ||\n                self.msaFilehandle ||\n                self.treeFilehandle\n              )\n            },\n\n            get blocksX() {\n              const { scrollX, blockSize: size, colWidth } = self\n              const ret = -(size * Math.floor(scrollX / size)) - size\n\n              const b = []\n              for (let i = ret; i < ret + size * 3; i += size) {\n                if (i + size > 0) {\n                  b.push(i)\n                }\n              }\n              if (\n                JSON.stringify(b) !== JSON.stringify(oldBlocksX) ||\n                colWidth !== oldValX\n              ) {\n                oldBlocksX = b\n                oldValX = colWidth\n              }\n              return oldBlocksX\n            },\n\n            get blocksY() {\n              const { scrollY, blockSize: size, rowHeight } = self\n              const ret = -(size * Math.floor(scrollY / size)) - 2 * size\n\n              const b = []\n              for (let i = ret; i < ret + size * 3; i += size) {\n                if (i + size > 0) {\n                  b.push(i)\n                }\n              }\n              if (\n                JSON.stringify(b) !== JSON.stringify(oldBlocksY) ||\n                rowHeight !== oldValY\n              ) {\n                oldBlocksY = b\n                oldValY = rowHeight\n              }\n              return oldBlocksY\n            },\n\n            get done() {\n              return (\n                self.volatileWidth > 0 &&\n                this.initialized &&\n                (self.data.msa || self.data.tree)\n              )\n            },\n\n            get alignmentDetails() {\n              return this.MSA?.getDetails() || {}\n            },\n\n            get currentAlignmentName() {\n              return this.alignmentNames[self.currentAlignment]\n            },\n\n            get alignmentNames() {\n              return this.MSA?.alignmentNames || []\n            },\n\n            get noTree() {\n              return !!this.tree.noTree\n            },\n\n            get menuItems() {\n              return []\n            },\n\n            get MSA() {\n              const text = self.data.msa\n              if (text) {\n                if (Stockholm.sniff(text)) {\n                  return new StockholmMSA(text, self.currentAlignment)\n                } else if (text.startsWith('>')) {\n                  return new FastaMSA(text)\n                } else {\n                  return new ClustalMSA(text)\n                }\n              }\n              return null\n            },\n            get width() {\n              return self.volatileWidth\n            },\n\n            get numColumns() {\n              return (\n                ((this.MSA?.getWidth() || 0) - this.blanks.length) *\n                self.colWidth\n              )\n            },\n\n            get tree() {\n              const {\n                data: { tree },\n                collapsed,\n              } = self\n              const t = tree\n                ? generateNodeIds(parseNewick(tree))\n                : this.MSA?.getTree()\n\n              return t ? filter(t, collapsed) : { noTree: true }\n            },\n\n            get root() {\n              return getRoot(this.tree)\n            },\n\n            get msaAreaWidth() {\n              return this.width - self.treeAreaWidth\n            },\n\n            get blanks() {\n              const nodes = this.hierarchy.leaves()\n              const blanks = []\n\n              // filter type guard\n              // https://www.benmvp.com/blog/filtering-undefined-elements-from-array-typescript/\n              const strs = nodes\n                .map(({ data }) => this.MSA?.getRow(data.name))\n                .filter((item): item is string[] => !!item)\n\n              for (let i = 0; i < strs[0].length; i++) {\n                let counter = 0\n                for (let j = 0; j < strs.length; j++) {\n                  if (strs[j][i] === '-') {\n                    counter++\n                  }\n                }\n                if (counter === strs.length) {\n                  blanks.push(i)\n                }\n              }\n              return blanks\n            },\n\n            get columns(): Record<string, string> {\n              const nodes = this.hierarchy.leaves()\n              const rows = nodes\n                .map(({ data }) => [data.name, this.MSA?.getRow(data.name)])\n                .filter((f) => !!f[1])\n              const strs = rows.map((row) => row[1])\n\n              const ret: string[] = []\n              for (let i = 0; i < strs.length; i++) {\n                let s = ''\n                let b = 0\n                for (let j = 0; j < strs[i].length; j++) {\n                  if (j === this.blanks[b]) {\n                    b++\n                  } else {\n                    s += strs[i][j]\n                  }\n                }\n                ret.push(s)\n              }\n              return Object.fromEntries(\n                rows.map((row, index) => [row[0], ret[index]]),\n              )\n            },\n\n            // generates a new tree that is clustered with x,y positions\n            get hierarchy() {\n              const root = getRoot(this.tree)\n              const clust = cluster()\n                .size([this.totalHeight, self.treeWidth])\n                .separation(() => 1)\n              clust(root)\n              setBrLength(\n                root,\n                (root.data.length = 0),\n                self.treeWidth / maxLength(root),\n              )\n              return root\n            },\n\n            get totalHeight() {\n              return this.root.leaves().length * self.rowHeight\n            },\n          }\n        }),\n    )\n    .actions((self) => ({\n      doScrollY(deltaY: number) {\n        self.scrollY = clamp(-self.totalHeight + 10, self.scrollY + deltaY, 10)\n      },\n\n      doScrollX(deltaX: number) {\n        self.scrollX = clamp(\n          -self.numColumns + (self.msaAreaWidth - 20),\n          self.scrollX + deltaX,\n          0,\n        )\n      },\n    })),\n  {\n    postProcessor(result) {\n      const { data, ...rest } = result\n      return rest\n    },\n  },\n)\n\nexport default model\n\nexport type MsaViewStateModel = typeof model\nexport type MsaViewModel = Instance<MsaViewStateModel>\n","import * as Clustal from 'clustal-js'\nexport default class ClustalMSA {\n  private MSA: {\n    header: Record<string, any>\n    alns: { id: string; seq: string }[]\n  }\n\n  constructor(text: string) {\n    this.MSA = Clustal.parse(text)\n  }\n\n  getMSA() {\n    return this.MSA\n  }\n\n  getRow(name: string) {\n    return this.MSA.alns.find((aln) => aln.id === name)?.seq.split('')\n  }\n\n  getWidth() {\n    return this.MSA.alns[0].seq.length\n  }\n\n  getDetails() {\n    return this.MSA.header\n  }\n\n  get alignmentNames() {\n    return []\n  }\n\n  getTree() {\n    return {\n      id: 'root',\n      noTree: true,\n      branchset: this.MSA.alns,\n    }\n  }\n}\n","import Stockholm from 'stockholm-js'\nimport parseNewick from '../parseNewick'\n\nimport { generateNodeIds } from '../util'\ntype StockholmEntry = {\n  gf: {\n    DE?: string[]\n    NH?: string[]\n  }\n  seqdata: { [key: string]: string }\n}\n\nexport default class StockholmMSA {\n  private data: StockholmEntry[]\n  private MSA: StockholmEntry\n\n  constructor(text: string, currentAlignment: number) {\n    const res = Stockholm.parseAll(text)\n    this.data = res\n    this.MSA = res[currentAlignment]\n  }\n\n  getMSA() {\n    return this.MSA\n  }\n\n  getRow(name: string) {\n    return this.MSA?.seqdata[name]?.split('')\n  }\n\n  getWidth() {\n    const name = Object.keys(this.MSA?.seqdata)[0]\n    return this.getRow(name).length\n  }\n\n  get alignmentNames() {\n    return this.data.map(\n      (aln, index) => aln.gf.DE?.[0] || `Alignment ${index + 1}`,\n    )\n  }\n\n  getDetails() {\n    return this.MSA.gf\n  }\n\n  getTree() {\n    const tree = this.MSA?.gf?.NH?.[0]\n    return tree\n      ? generateNodeIds(parseNewick(tree))\n      : {\n          id: 'root',\n          noTree: true,\n          branchset: Object.keys(this.MSA.seqdata).map((name) => ({\n            id: name,\n          })),\n        }\n  }\n}\n","type StrMap = { [key: string]: string }\nexport default class FastaMSA {\n  private MSA: { seqdata: { [key: string]: string } }\n  constructor(text: string) {\n    const seq: StrMap = {}\n    let name = ''\n    const re = /^>(\\S+)/\n    text.split('\\n').forEach((line) => {\n      const match = re.exec(line)\n      if (match) {\n        seq[(name = match[1])] = ''\n      } else if (name) {\n        seq[name] = seq[name] + line.replace(/[ \\t]/g, '')\n      }\n    })\n    this.MSA = { seqdata: seq }\n  }\n\n  getMSA() {\n    return this.MSA\n  }\n\n  getRow(name: string) {\n    return this.MSA?.seqdata[name]?.split('')\n  }\n\n  getWidth() {\n    const name = Object.keys(this.MSA?.seqdata)[0]\n    return this.getRow(name).length\n  }\n\n  get alignmentNames() {\n    return []\n  }\n\n  getDetails() {\n    return {}\n  }\n\n  getTree() {\n    return {\n      id: 'root',\n      noTree: true,\n      branchset: Object.keys(this.MSA.seqdata).map((name) => ({\n        id: name,\n      })),\n    }\n  }\n}\n","import { observer } from \"mobx-react\";\nimport { MSAView, MSAModel } from \"react-msaview\";\nimport { createJBrowseTheme } from \"@jbrowse/core/ui/theme\";\n\nimport { ThemeProvider } from \"@material-ui/core/styles\";\n\nfunction App() {\n  const theme = createJBrowseTheme();\n  const model = MSAModel.create({ id: `${Math.random()}`, type: \"MsaView\" });\n  model.setWidth(1800);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ border: \"1px solid black\", margin: 20 }}>\n        <MSAView model={model} />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default observer(App);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}